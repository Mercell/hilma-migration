//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Hilma.Domain.Data.Read
{
    using System = global::System;



    /// <summary>Container for annexes of a notice.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Annex
    {
        [Newtonsoft.Json.JsonProperty("d1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD1 D1 { get; set; }

        [Newtonsoft.Json.JsonProperty("d2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD2 D2 { get; set; }

        [Newtonsoft.Json.JsonProperty("d3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD3 D3 { get; set; }

        [Newtonsoft.Json.JsonProperty("d4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD4 D4 { get; set; }

        [Newtonsoft.Json.JsonProperty("directNational", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexNational DirectNational { get; set; }


    }

    /// <summary>Annex D1 for direct purchase.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnexD1
    {
        /// <summary>AD1.1.1) Got no valid tenders.
        /// Not sent to TED, only to toggle visibility of AD1.1.2.</summary>
        [Newtonsoft.Json.JsonProperty("noTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTenders { get; set; }

        /// <summary>AD1.1.2) Type of the negotiated procedure: Open or Restricted.</summary>
        [Newtonsoft.Json.JsonProperty("procedureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD1ProcedureType? ProcedureType { get; set; }

        /// <summary>AD1.1.3) The supplies are manufactured purely for research/study/etc.</summary>
        [Newtonsoft.Json.JsonProperty("suppliesManufacturedForResearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppliesManufacturedForResearch { get; set; }

        /// <summary>AD1.1.4) The solution is only provided by particular economic operator.
        /// Not sent to TED, only to toggle visibility of AD1.1.5</summary>
        [Newtonsoft.Json.JsonProperty("providedByOnlyParticularOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvidedByOnlyParticularOperator { get; set; }

        /// <summary>AD1.1.5) The reason why There was no competition in section AD1.1.4</summary>
        [Newtonsoft.Json.JsonProperty("reasonForNoCompetition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD1ReasonForNoCompetition? ReasonForNoCompetition { get; set; }

        /// <summary>AD1.1.6) Extreme urgency brought about by events unforeseeable for the contracting
        /// authority and in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("extremeUrgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtremeUrgency { get; set; }

        /// <summary>AD1.1.7) Additional deliveries by the original supplier ordered under the strict
        /// conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("additionalDeliveries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDeliveries { get; set; }

        /// <summary>AD1.1.8) New works / services, constituting a repetition of existing works / services
        /// and ordered in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("repetitionExisting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RepetitionExisting { get; set; }

        /// <summary>    AD1.1.9) Service contract to be awarded to the winner or one of winners under the
        /// rules of a design contest</summary>
        [Newtonsoft.Json.JsonProperty("designContestAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DesignContestAward { get; set; }

        /// <summary>AD1.1.10) Procurement of supplies quoted and purchased on a commodity market</summary>
        [Newtonsoft.Json.JsonProperty("commodityMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommodityMarket { get; set; }

        /// <summary>AD1.1.11) Purchase of supplies or services on particularly advantageous terms
        /// Not sent to ted, toggles visibility of  AD1.1.12</summary>
        [Newtonsoft.Json.JsonProperty("advantageousTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdvantageousTerms { get; set; }

        /// <summary>AD1.1.12) Why there is advantageous reasons to procure directly</summary>
        [Newtonsoft.Json.JsonProperty("advantageousPurchaseReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD1AdvantageousPurchaseReason? AdvantageousPurchaseReason { get; set; }

        /// <summary>AD1.3.1) Please explain in a clear and comprehensive manner why the award of the
        /// contract without prior publication in the Official Journal of the European
        /// Union is lawful</summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Justification { get; set; }


    }

    /// <summary>Annex D2 for direct purchase.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnexD2
    {
        /// <summary>AD2.1.1) Got no valid tenders.
        /// Not sent to TED, only to toggle visibility of AD1.1.2.</summary>
        [Newtonsoft.Json.JsonProperty("noTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTenders { get; set; }

        /// <summary>AD2.1.2) The contract involved is purely for the purpose of research,
        /// experiment, study or development under the conditions stated in
        /// the Directive</summary>
        [Newtonsoft.Json.JsonProperty("pureResearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PureResearch { get; set; }

        /// <summary>AD2.1.3) The solution is only provided by particular economic operator.
        /// Not sent to TED, only to toggle visibility of AD2.1.4</summary>
        [Newtonsoft.Json.JsonProperty("providedByOnlyParticularOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvidedByOnlyParticularOperator { get; set; }

        /// <summary>AD2.1.4) The reason why there was no competition in section AD2.1.3</summary>
        [Newtonsoft.Json.JsonProperty("reasonForNoCompetition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD2ReasonForNoCompetition? ReasonForNoCompetition { get; set; }

        /// <summary>AD2.1.5) Extreme urgency brought about by events unforeseeable for the contracting
        /// authority and in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("extremeUrgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtremeUrgency { get; set; }

        /// <summary>AD2.1.6) Additional deliveries by the original supplier ordered under the strict
        /// conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("additionalDeliveries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDeliveries { get; set; }

        /// <summary>AD2.1.7) New works / services, constituting a repetition of existing works / services
        /// and ordered in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("repetitionExisting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RepetitionExisting { get; set; }

        /// <summary>    AD2.1.8) Service contract to be awarded to the winner or one of winners under the
        /// rules of a design contest</summary>
        [Newtonsoft.Json.JsonProperty("designContestAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DesignContestAward { get; set; }

        /// <summary>AD2.1.9) Procurement of supplies quoted and purchased on a commodity market</summary>
        [Newtonsoft.Json.JsonProperty("commodityMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommodityMarket { get; set; }

        /// <summary>AD2.1.10) Purchase of supplies or services on particularly advantageous terms
        /// Not sent to ted, toggles visibility of  AD1.1.12</summary>
        [Newtonsoft.Json.JsonProperty("advantageousTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdvantageousTerms { get; set; }

        /// <summary>AD2.1.11) Why there is advantageous reasons to procure directly</summary>
        [Newtonsoft.Json.JsonProperty("advantageousPurchaseReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD2AdvantageousPurchaseReason? AdvantageousPurchaseReason { get; set; }

        /// <summary>AD1.1.12) Bargain purchase taking advantage of a particularly
        /// advantageous opportunity available for a very short time at a price
        /// considerably lower than market prices.</summary>
        [Newtonsoft.Json.JsonProperty("bargainPurchase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BargainPurchase { get; set; }

        /// <summary>AD2.3.1) Please explain in a clear and comprehensive manner why the award of the
        /// contract without prior publication in the Official Journal of the European
        /// Union is lawful</summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Justification { get; set; }


    }

    /// <summary>Annex D3 for direct purchase</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnexD3
    {
        /// <summary>AD3.1.1) Got no valid tenders.
        /// Not sent to TED, only to toggle visibility of AD1.1.2.</summary>
        [Newtonsoft.Json.JsonProperty("noTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTenders { get; set; }

        /// <summary>AD3.1.2) Type of the negotiated procedure: Open or Restricted.</summary>
        [Newtonsoft.Json.JsonProperty("procedureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD3ProcedureType? ProcedureType { get; set; }

        /// <summary>AD3.1.3) The contract concerns research and development services other than
        /// those referred to in Article 13 of Directive 2009/81/EC (for services
        /// and supplies only)</summary>
        [Newtonsoft.Json.JsonProperty("otherServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OtherServices { get; set; }

        /// <summary>AD3.1.4) The contract involved is purely for the purpose of research,
        /// experiment, study or development under the conditions stated in
        /// the Directive</summary>
        [Newtonsoft.Json.JsonProperty("productsManufacturedForResearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProductsManufacturedForResearch { get; set; }

        /// <summary>AD3.1.5) How is this different form AD3.1.1, nobody knows, but then again,
        /// such knowledge would be heresy.</summary>
        [Newtonsoft.Json.JsonProperty("allTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllTenders { get; set; }

        /// <summary>AD3.1.6) The solution is only provided by particular economic operator.
        /// Not sent to TED, only to toggle visibility of AD1.1.7</summary>
        [Newtonsoft.Json.JsonProperty("providedByOnlyParticularOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvidedByOnlyParticularOperator { get; set; }

        /// <summary>AD3.1.7) The reason why There was no competition in section AD3.1.6</summary>
        [Newtonsoft.Json.JsonProperty("reasonForNoCompetition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD3ReasonForNoCompetition? ReasonForNoCompetition { get; set; }

        /// <summary>AD3.1.8) Extreme urgency brought about by events unforeseeable for the contracting
        /// authority and in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("crisisUrgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CrisisUrgency { get; set; }

        /// <summary>AD3.1.9) Extreme urgency brought about by events unforeseeable for the contracting
        /// authority and in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("extremeUrgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtremeUrgency { get; set; }

        /// <summary>AD3.1.10) Additional deliveries by the original supplier ordered under the strict
        /// conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("additionalDeliveries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdditionalDeliveries { get; set; }

        /// <summary>AD3.1.11) New works / services, constituting a repetition of existing works / services
        /// and ordered in accordance with the strict conditions stated in the Directive</summary>
        [Newtonsoft.Json.JsonProperty("repetitionExisting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RepetitionExisting { get; set; }

        /// <summary>AD1.1.12) Procurement of supplies quoted and purchased on a commodity market</summary>
        [Newtonsoft.Json.JsonProperty("commodityMarket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommodityMarket { get; set; }

        /// <summary>AD3.1.13) Purchase of supplies or services on particularly advantageous terms
        /// Not sent to ted, toggles visibility of  AD3.1.14</summary>
        [Newtonsoft.Json.JsonProperty("advantageousTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdvantageousTerms { get; set; }

        /// <summary>AD3.1.14) Why there is advantageous reasons to procure directly</summary>
        [Newtonsoft.Json.JsonProperty("advantageousPurchaseReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD3AdvantageousPurchaseReason? AdvantageousPurchaseReason { get; set; }

        /// <summary>AD3.1.15) Contract related to the provision of air and maritime transport
        /// services for the armed forces of a Member State deployed or to be deployed
        /// abroad, under the strict conditions stated in the directive</summary>
        [Newtonsoft.Json.JsonProperty("maritimeService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MaritimeService { get; set; }

        /// <summary>Other justification
        /// D.13/D.14</summary>
        [Newtonsoft.Json.JsonProperty("otherJustification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD3OtherJustification? OtherJustification { get; set; }

        /// <summary>AD3.3.1) Please explain in a clear and comprehensive manner why the award of the
        /// contract without prior publication in the Official Journal of the European
        /// Union is lawful</summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Justification { get; set; }


    }

    /// <summary>Annex D4 for direct purchases</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnexD4
    {
        /// <summary>AD4.1.1) Got no valid tenders.</summary>
        [Newtonsoft.Json.JsonProperty("noTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTenders { get; set; }

        /// <summary>AD3.1.6) The solution is only provided by particular economic operator.
        /// Not sent to TED, only to toggle visibility of AD1.1.7</summary>
        [Newtonsoft.Json.JsonProperty("providedByOnlyParticularOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvidedByOnlyParticularOperator { get; set; }

        /// <summary>AD3.1.7) The reason why There was no competition in section AD3.1.6</summary>
        [Newtonsoft.Json.JsonProperty("reasonForNoCompetition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexD4ReasonForNoCompetition? ReasonForNoCompetition { get; set; }

        /// <summary>AD4.3.1) Please explain in a clear and comprehensive manner why the award of the
        /// contract without prior publication in the Official Journal of the European
        /// Union is lawful</summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Justification { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnnexNational
    {
        /// <summary>Type of excuse for direct purchase</summary>
        [Newtonsoft.Json.JsonProperty("purchaseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnexNationalPurchaseType? PurchaseType { get; set; }

        /// <summary>Justification for direct purchase</summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Justification { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttachmentInformation
    {
        /// <summary>Description for attachments and links</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        /// <summary>Links attached to the notice.</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        /// <summary>Is the attachments sub-page valid?</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttachmentInformationValidationState? ValidationState { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttachmentViewModel
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>State of a tracked file.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttachmentViewModelStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }

    /// <summary>Section V: Award of contract</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Award
    {
        /// <summary>Contract has been awarded for this notice.</summary>
        [Newtonsoft.Json.JsonProperty("contractAwarded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardContractAwarded? ContractAwarded { get; set; }

        [Newtonsoft.Json.JsonProperty("noAwardedContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonAward NoAwardedContract { get; set; }

        [Newtonsoft.Json.JsonProperty("awardedContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractAward AwardedContract { get; set; }

        /// <summary>If multiple contract awards, a list of awarded contracts. Mutually exclusive with Hilma.Domain.DataContracts.Award.AwardedContract</summary>
        [Newtonsoft.Json.JsonProperty("awardedContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractAward> AwardedContracts { get; set; }


    }

    /// <summary>Set of criteria for awarding the tender.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AwardCriteria
    {
        /// <summary>Type of criteria selected for this tender.</summary>
        [Newtonsoft.Json.JsonProperty("criterionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriteriaCriterionTypes? CriterionTypes { get; set; }

        /// <summary>Selected criteria configuration related to quality. Applicable if CriterionTypes.HasFlag(QualityCriterion).</summary>
        [Newtonsoft.Json.JsonProperty("qualityCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardCriterionDefinition> QualityCriteria { get; set; }

        /// <summary>Selected criteria configuration related to cost. Applicable if CriterionTypes.HasFlag(CostCriteria)</summary>
        [Newtonsoft.Json.JsonProperty("costCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardCriterionDefinition> CostCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("priceCriterion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriterionDefinition PriceCriterion { get; set; }

        /// <summary>Criterion given in descending order of importance.
        /// For F15 ex-ante, when dealing with licenses. Might be useful for license notice too.</summary>
        [Newtonsoft.Json.JsonProperty("criterion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Criterion { get; set; }

        /// <summary>If selected, the criteria is defined only in procurement documents. Only only for national notices</summary>
        [Newtonsoft.Json.JsonProperty("criteriaStatedInProcurementDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CriteriaStatedInProcurementDocuments { get; set; }


    }

    /// <summary>Set of criteria for awarding the tender.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AwardCriteriaDefence
    {
        /// <summary>Type of criteria selected for this tender.</summary>
        [Newtonsoft.Json.JsonProperty("criterionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriteriaDefenceCriterionTypes? CriterionTypes { get; set; }

        /// <summary>When CriterionTypes = EconomicallyAdvantageous</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriteriaDefenceEconomicCriteriaTypes? EconomicCriteriaTypes { get; set; }

        /// <summary>Award criteria</summary>
        [Newtonsoft.Json.JsonProperty("criteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AwardCriterionDefinition> Criteria { get; set; }


    }

    /// <summary>Describes one awarding criterion.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AwardCriterionDefinition
    {
        /// <summary>Free text description of criterion.</summary>
        [Newtonsoft.Json.JsonProperty("criterion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Criterion { get; set; }

        /// <summary>Free text description of weight.</summary>
        [Newtonsoft.Json.JsonProperty("weighting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weighting { get; set; }


    }

    /// <summary>Describes number of candidates to be invited.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CandidateNumberRestrictions
    {
        /// <summary>Exact number of candidates planned to be selected. Applicable if Selected = EnvisagedNumber</summary>
        [Newtonsoft.Json.JsonProperty("envisagedNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvisagedNumber { get; set; }

        /// <summary>Lower bound of range of candidates planned to be selected. Applicable if Selected = Range</summary>
        [Newtonsoft.Json.JsonProperty("envisagedMinimumNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvisagedMinimumNumber { get; set; }

        /// <summary>Upper bound of range of candidates planned to be selected. Applicable if Selected = Range</summary>
        [Newtonsoft.Json.JsonProperty("envisagedMaximumNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvisagedMaximumNumber { get; set; }

        /// <summary>Free text description of candidate number of selection criteria.</summary>
        [Newtonsoft.Json.JsonProperty("objectiveCriteriaForChoosing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ObjectiveCriteriaForChoosing { get; set; }

        /// <summary>Type of restriction for this tender.</summary>
        [Newtonsoft.Json.JsonProperty("selected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CandidateNumberRestrictionsSelected? Selected { get; set; }


    }

    /// <summary>Defines all possible changes according to:
    /// #  XSD name : F14_2014
    /// #  RELEASE : "R2.0.9.S04"
    /// #  Intermediate release number 002-20201027
    /// #  Last update : 08/10/2020
    /// #  Form : Corrigendum
    /// 
    /// &lt;element name="NOTHING" type="empty" /&gt;&lt;element ref="CPV_MAIN" /&gt;&lt;element ref="CPV_ADDITIONAL" maxOccurs="100" /&gt;&lt;element name="TEXT" type="text_ft_multi_lines" /&gt;&lt;sequence&gt;&lt;element name="DATE" type="date_full" /&gt;&lt;element name="TIME" type="time" minOccurs="0" /&gt;&lt;/sequence&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Change
    {
        /// <summary>Section from Ted attribute. Eg. I.1</summary>
        [Newtonsoft.Json.JsonProperty("section", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Section { get; set; }

        /// <summary>Translated label of Ted attribute.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Lot number, if applicable.</summary>
        [Newtonsoft.Json.JsonProperty("lotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotNumber { get; set; }

        /// <summary>Text changes - old</summary>
        [Newtonsoft.Json.JsonProperty("oldText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OldText { get; set; }

        /// <summary>Text changes - new</summary>
        [Newtonsoft.Json.JsonProperty("newText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NewText { get; set; }

        [Newtonsoft.Json.JsonProperty("newMainCpvCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpvCode NewMainCpvCode { get; set; }

        /// <summary>Nuts codes (used in defence corrigendums) - new</summary>
        [Newtonsoft.Json.JsonProperty("newNutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NewNutsCodes { get; set; }

        /// <summary>Additional cpv code changes - new</summary>
        [Newtonsoft.Json.JsonProperty("newAdditionalCpvCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpvCode> NewAdditionalCpvCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("oldMainCpvCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpvCode OldMainCpvCode { get; set; }

        /// <summary>Additional cpv code changes - old</summary>
        [Newtonsoft.Json.JsonProperty("oldAdditionalCpvCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpvCode> OldAdditionalCpvCodes { get; set; }

        /// <summary>Nuts codes (used in defence corrigendums) - old</summary>
        [Newtonsoft.Json.JsonProperty("oldNutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OldNutsCodes { get; set; }

        /// <summary>Date changes - new</summary>
        [Newtonsoft.Json.JsonProperty("newDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NewDate { get; set; }

        /// <summary>Date changes - old</summary>
        [Newtonsoft.Json.JsonProperty("oldDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OldDate { get; set; }


    }

    /// <summary>Communications section of a notice. Contains information on where to
    /// get additional information and where to send the offers.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CommunicationInformation
    {
        /// <summary>How are the documents related to the procurement described by the notice available.</summary>
        [Newtonsoft.Json.JsonProperty("procurementDocumentsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformationProcurementDocumentsAvailable? ProcurementDocumentsAvailable { get; set; }

        /// <summary>Url for the documents. Including protocol.</summary>
        [Newtonsoft.Json.JsonProperty("procurementDocumentsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcurementDocumentsUrl { get; set; }

        /// <summary>Where is additional information available from.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformationAdditionalInformation? AdditionalInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalInformationAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation AdditionalInformationAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("otherAddressForProcurementDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation OtherAddressForProcurementDocuments { get; set; }

        /// <summary>How are tenders to be sent.</summary>
        [Newtonsoft.Json.JsonProperty("sendTendersOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformationSendTendersOption? SendTendersOption { get; set; }

        /// <summary>If SendTendersOption=AddressSendTenders: the url for the tenders. Including protocol.</summary>
        [Newtonsoft.Json.JsonProperty("electronicAddressToSendTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElectronicAddressToSendTenders { get; set; }

        [Newtonsoft.Json.JsonProperty("addressToSendTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation AddressToSendTenders { get; set; }

        /// <summary>Does making the tender require specialized tools.</summary>
        [Newtonsoft.Json.JsonProperty("electronicCommunicationRequiresSpecialTools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectronicCommunicationRequiresSpecialTools { get; set; }

        /// <summary>If making the tender requires special tools, the address to obtain them from.
        /// Including protocol.</summary>
        [Newtonsoft.Json.JsonProperty("electronicCommunicationInfoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElectronicCommunicationInfoUrl { get; set; }

        /// <summary>Procurement documents in Hilma in full.</summary>
        [Newtonsoft.Json.JsonProperty("documentsEntirelyInHilma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DocumentsEntirelyInHilma { get; set; }

        /// <summary>Directive 2009/81/EY (Defence contracts)
        /// Specifications and additional documents can be obtained from</summary>
        [Newtonsoft.Json.JsonProperty("specsAndAdditionalDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformationSpecsAndAdditionalDocuments? SpecsAndAdditionalDocuments { get; set; }

        [Newtonsoft.Json.JsonProperty("specsAndAdditionalDocumentsAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation SpecsAndAdditionalDocumentsAddress { get; set; }

        /// <summary>Directive 2009/81/EY (Defence notices)
        /// Electronic access to information: (URL)</summary>
        [Newtonsoft.Json.JsonProperty("electronicAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElectronicAccess { get; set; }

        /// <summary>Vuejs application validation state for corresponding form section.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Section VI: Complementary information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComplementaryInformation
    {
        /// <summary>Appears only for Hilma.Domain.Enums.NoticeType=2.
        /// Specified if the procurement is recurring</summary>
        [Newtonsoft.Json.JsonProperty("isRecurringProcurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRecurringProcurement { get; set; }

        /// <summary>Appears and is required if Hilma.Domain.Entities.ComplementaryInformation.IsRecurringProcurement is true.
        /// Free text to specify information when further contract notices will be published.</summary>
        [Newtonsoft.Json.JsonProperty("estimatedTimingForFurtherNoticePublish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EstimatedTimingForFurtherNoticePublish { get; set; }

        /// <summary>Appears only for Hilma.Domain.Enums.NoticeType=2.
        /// Specified if electronic ordering is used for the procurement.</summary>
        [Newtonsoft.Json.JsonProperty("electronicOrderingUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectronicOrderingUsed { get; set; }

        /// <summary>Appears only for Hilma.Domain.Enums.NoticeType=2.
        /// Specified if electronic invoicing is used for the procurement.</summary>
        [Newtonsoft.Json.JsonProperty("electronicInvoicingUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectronicInvoicingUsed { get; set; }

        /// <summary>Appears only for Hilma.Domain.Enums.NoticeType=2.
        /// Specified if electronic payment is used for the procurement.</summary>
        [Newtonsoft.Json.JsonProperty("electronicPaymentUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectronicPaymentUsed { get; set; }

        /// <summary>Additional information about how the participants should proceed in order
        /// to attend to the procurements process</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("defence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComplementaryInformationDefence Defence { get; set; }

        /// <summary>Vuejs application form validation sate for corresponding section.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComplementaryInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC (Defence notices) 
    /// Section VI: Complementary information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComplementaryInformationDefence
    {
        [Newtonsoft.Json.JsonProperty("euFunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EuFunds EuFunds { get; set; }

        /// <summary>Prior information
        /// VI.3) Information on general regulatory framework
        /// Tax legislation</summary>
        [Newtonsoft.Json.JsonProperty("taxLegislationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxLegislationUrl { get; set; }

        /// <summary>True, if TaxLegislation should be filled.</summary>
        [Newtonsoft.Json.JsonProperty("taxLegislationInfoProvided", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxLegislationInfoProvided { get; set; }

        [Newtonsoft.Json.JsonProperty("taxLegislation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation TaxLegislation { get; set; }

        /// <summary>Prior information
        /// VI.3) Information on general regulatory framework
        /// Environmental protection legislation</summary>
        [Newtonsoft.Json.JsonProperty("environmentalProtectionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvironmentalProtectionUrl { get; set; }

        /// <summary>True, if EnvironmentalProtection should be filled.</summary>
        [Newtonsoft.Json.JsonProperty("environmentalProtectionInfoProvided", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnvironmentalProtectionInfoProvided { get; set; }

        [Newtonsoft.Json.JsonProperty("environmentalProtection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation EnvironmentalProtection { get; set; }

        /// <summary>Prior information
        /// VI.3) Information on general regulatory framework
        /// Employment protection and working conditions</summary>
        [Newtonsoft.Json.JsonProperty("employmentProtectionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentProtectionUrl { get; set; }

        /// <summary>True, if EmploymentProtection should be filled.</summary>
        [Newtonsoft.Json.JsonProperty("employmentProtectionInfoProvided", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmploymentProtectionInfoProvided { get; set; }

        [Newtonsoft.Json.JsonProperty("employmentProtection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation EmploymentProtection { get; set; }


    }

    /// <summary>Section III: Legal, economic, financial and technical information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConditionsInformation
    {
        /// <summary>III.1.1) List and brief description of conditions</summary>
        [Newtonsoft.Json.JsonProperty("professionalSuitabilityRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProfessionalSuitabilityRequirements { get; set; }

        /// <summary>III.1.2) Selection criteria as stated in the procurement documents</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaToParticipate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EconomicCriteriaToParticipate { get; set; }

        /// <summary>III.1.2) List and brief description of selection criteria</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicCriteriaDescription { get; set; }

        /// <summary>III.1.2) Minimum level(s) of standards possibly required</summary>
        [Newtonsoft.Json.JsonProperty("economicRequiredStandards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicRequiredStandards { get; set; }

        /// <summary>III.1.3) Selection criteria as stated in the procurement documents</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaToParticipate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TechnicalCriteriaToParticipate { get; set; }

        /// <summary>III.1.3) List and brief description of selection criteria
        /// participate.</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalCriteriaDescription { get; set; }

        /// <summary>III.1.3) Minimum level(s) of standards possibly required</summary>
        [Newtonsoft.Json.JsonProperty("technicalRequiredStandards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalRequiredStandards { get; set; }

        /// <summary>III.1.4) List and brief description of rules and criteria</summary>
        [Newtonsoft.Json.JsonProperty("rulesForParticipation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public System.Collections.Generic.ICollection<string> RulesForParticipation { get; set; }

        /// <summary>III.1.5) Contract is reserved for workshops for disadvantaged persons.</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToShelteredWorkshop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToShelteredWorkshop { get; set; }

        /// <summary>III.1.5) Contract is restricted to framework of sheltered employment programs.</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToShelteredProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToShelteredProgram { get; set; }

        /// <summary>III.1.5) Participation in the procedure is reserved to organisations pursuing
        /// a public service mission and fulfilling the conditions set in Article 94(2)
        /// of Directive 2014/25/EU</summary>
        [Newtonsoft.Json.JsonProperty("reservedOrganisationServiceMission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReservedOrganisationServiceMission { get; set; }

        /// <summary>III.1.6) Deposits and guarantees required</summary>
        [Newtonsoft.Json.JsonProperty("depositsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DepositsRequired { get; set; }

        /// <summary>III.1.7) Main financing conditions and payment arrangements and/or reference to the relevant provisions governing them</summary>
        [Newtonsoft.Json.JsonProperty("financingConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FinancingConditions { get; set; }

        /// <summary>III.1.8) Legal form to be taken by the group of economic operators to whom the contract is to be awarded</summary>
        [Newtonsoft.Json.JsonProperty("legalFormTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LegalFormTaken { get; set; }

        /// <summary>III.1.9) Qualification for the system (summary of the main conditions and methods)</summary>
        [Newtonsoft.Json.JsonProperty("qualificationSystemConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QualificationSystemCondition> QualificationSystemConditions { get; set; }

        /// <summary>III.1.10) Criteria for the selection of participants: 2 (in the case of a restricted contest)</summary>
        [Newtonsoft.Json.JsonProperty("ciriteriaForTheSelectionOfParticipants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CiriteriaForTheSelectionOfParticipants { get; set; }

        /// <summary>III.2.1) Execution of the service is reserved to a particular profession</summary>
        [Newtonsoft.Json.JsonProperty("executionOfServiceIsReservedForProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExecutionOfServiceIsReservedForProfession { get; set; }

        /// <summary>III.2.1) Information about a particular profession</summary>
        [Newtonsoft.Json.JsonProperty("referenceToRelevantLawRegulationOrProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferenceToRelevantLawRegulationOrProvision { get; set; }

        /// <summary>III.2.1) Participation is reserved to a particular profession</summary>
        [Newtonsoft.Json.JsonProperty("participationIsReservedForProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParticipationIsReservedForProfession { get; set; }

        /// <summary>III.2.1) Information about a particular profession
        /// Indicate profession</summary>
        [Newtonsoft.Json.JsonProperty("indicateProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IndicateProfession { get; set; }

        /// <summary>III.2.2) Contract performance conditions</summary>
        [Newtonsoft.Json.JsonProperty("contractPerformanceConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContractPerformanceConditions { get; set; }

        /// <summary>III.2.3) Information about staff responsible for the performance of the contract
        /// Obligation to indicate the names and professional qualifications of the staff assigned to performing the contract</summary>
        [Newtonsoft.Json.JsonProperty("obligationToIndicateNamesAndProfessionalQualifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ObligationToIndicateNamesAndProfessionalQualifications { get; set; }

        /// <summary>Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC
    /// Section III: Legal, economic, financial and technical information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConditionsInformationDefence
    {
        /// <summary>III.1.1) List and brief description of conditions</summary>
        [Newtonsoft.Json.JsonProperty("depositsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DepositsRequired { get; set; }

        /// <summary>III.1.2) Main financing conditions and payment arrangements and/or reference to the relevant provisions governing them</summary>
        [Newtonsoft.Json.JsonProperty("financingConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FinancingConditions { get; set; }

        /// <summary>III.1.3) Legal form to be taken by the group of economic operators to whom the contract is to be awarded</summary>
        [Newtonsoft.Json.JsonProperty("legalFormTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LegalFormTaken { get; set; }

        /// <summary>III.1.4) Other particular conditions to which the performance of the contract is subject, in particular with regard to security of supply
        /// and security of information</summary>
        [Newtonsoft.Json.JsonProperty("otherParticularConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OtherParticularConditions { get; set; }

        /// <summary>III.1.5) Information about security clearance
        /// Candidates which do not yet hold security clearance may obtain such clearance until</summary>
        [Newtonsoft.Json.JsonProperty("securityClearanceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SecurityClearanceDate { get; set; }

        /// <summary>Criteria regarding the personal situation of economic operators
        /// (that may lead to their exclusion) including requirements relating to
        /// enrolment on professional or trade registers</summary>
        [Newtonsoft.Json.JsonProperty("personalSituationOfEconomicOperators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PersonalSituationOfEconomicOperators { get; set; }

        /// <summary>Criteria regarding the personal situation of subcontractors (that may
        /// lead to their rejection) including requirements relating to enrolment
        /// on professional or trade registers(if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("personalSituationOfSubcontractors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PersonalSituationOfSubcontractors { get; set; }

        /// <summary>Criteria regarding the economic and financial standing of economic
        /// operators(that may lead to their exclusion)</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaOfEconomicOperators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicCriteriaOfEconomicOperators { get; set; }

        /// <summary>Minimum level(s) of standards possibly required: (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaOfEconomicOperatorsMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicCriteriaOfEconomicOperatorsMinimum { get; set; }

        /// <summary>Criteria regarding the economic and financial standing of
        /// subcontractors(that may lead to their rejection) (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaOfSubcontractors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicCriteriaOfSubcontractors { get; set; }

        /// <summary>Minimum level(s) of standards possibly required: (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("economicCriteriaOfSubcontractorsMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EconomicCriteriaOfSubcontractorsMinimum { get; set; }

        /// <summary>Criteria regarding the economic and financial standing of economic
        /// operators(that may lead to their exclusion)</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaOfEconomicOperators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalCriteriaOfEconomicOperators { get; set; }

        /// <summary>Minimum level(s) of standards possibly required: (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaOfEconomicOperatorsMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalCriteriaOfEconomicOperatorsMinimum { get; set; }

        /// <summary>Criteria regarding the economic and financial standing of
        /// subcontractors(that may lead to their rejection) (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaOfSubcontractors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalCriteriaOfSubcontractors { get; set; }

        /// <summary>Minimum level(s) of standards possibly required: (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("technicalCriteriaOfSubcontractorsMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TechnicalCriteriaOfSubcontractorsMinimum { get; set; }

        /// <summary>III.2.4) Information about reserved contracts
        /// The contract is restricted to sheltered workshops</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToShelteredWorkshops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToShelteredWorkshops { get; set; }

        /// <summary>III.2.4) Information about reserved contracts
        /// The execution of the contract is restricted to the framework of sheltered employment programmes</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToShelteredProgrammes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToShelteredProgrammes { get; set; }

        /// <summary>III.3.1) Information about a particular profession
        /// Execution of the service is reserved to a particular profession</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToParticularProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RestrictedToParticularProfession { get; set; }

        /// <summary>III.3.1) Information about a particular profession
        /// Reference to the relevant law, regulation or administrative provision</summary>
        [Newtonsoft.Json.JsonProperty("restrictedToParticularProfessionLaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RestrictedToParticularProfessionLaw { get; set; }

        /// <summary>III.3.2) Staff responsible for the execution of the service
        /// Legal persons should indicate the names and professional qualifications of the staff responsible for the execution of the service</summary>
        [Newtonsoft.Json.JsonProperty("staffResponsibleForExecution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StaffResponsibleForExecution { get; set; }

        /// <summary>Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformationDefenceValidationState? ValidationState { get; set; }


    }

    /// <summary>Conditions for participation.
    /// National contracts only.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConditionsInformationNational
    {
        /// <summary>Participation and contractor selection criteria description</summary>
        [Newtonsoft.Json.JsonProperty("participantSuitabilityCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ParticipantSuitabilityCriteria { get; set; }

        /// <summary>Certifications and other reports, on which suitability is assessed
        /// Todistukset ja selvitykset, joiden perusteella soveltuvuuden täyttyminen arvioidaan</summary>
        [Newtonsoft.Json.JsonProperty("requiredCertifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequiredCertifications { get; set; }

        /// <summary>Additional information</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalInformation { get; set; }

        /// <summary>Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformationNationalValidationState? ValidationState { get; set; }

        /// <summary>Procurement is reserved for sheltered workshop or program</summary>
        [Newtonsoft.Json.JsonProperty("reservedForShelteredWorkshopOrProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReservedForShelteredWorkshopOrProgram { get; set; }


    }

    /// <summary>Stores a contact person.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContactPerson
    {
        /// <summary>Name (given + family) of the contact person.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string Name { get; set; }

        /// <summary>Email address of the contact person.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Email { get; set; }

        /// <summary>Phone number of the contact person. Format is important for TED, refer to the example.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Phone { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractAward
    {
        /// <summary>Date of conclusion of the contract.</summary>
        [Newtonsoft.Json.JsonProperty("conclusionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ConclusionDate { get; set; }

        /// <summary>Contract No</summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNumber { get; set; }

        /// <summary>Contract title</summary>
        [Newtonsoft.Json.JsonProperty("contractTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumberOfTenders NumberOfTenders { get; set; }

        /// <summary>If the information in this section is confidential and should not be published on TED, it must be indicated by selecting false.</summary>
        [Newtonsoft.Json.JsonProperty("disagreeContractorInformationToBePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeContractorInformationToBePublished { get; set; }

        [Newtonsoft.Json.JsonProperty("contractors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractorContactInformation> Contractors { get; set; }

        [Newtonsoft.Json.JsonProperty("initialEstimatedValueOfContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract InitialEstimatedValueOfContract { get; set; }

        [Newtonsoft.Json.JsonProperty("finalTotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract FinalTotalValue { get; set; }

        /// <summary>The contract is likely to be subcontracted to third parties.</summary>
        [Newtonsoft.Json.JsonProperty("likelyToBeSubcontracted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LikelyToBeSubcontracted { get; set; }

        [Newtonsoft.Json.JsonProperty("valueOfSubcontract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract ValueOfSubcontract { get; set; }

        /// <summary>Proportion of the contract likely to be subcontracted, 0-100 (%)</summary>
        [Newtonsoft.Json.JsonProperty("proportionOfValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProportionOfValue { get; set; }

        /// <summary>Short description of the part of the contract to be subcontracted.</summary>
        [Newtonsoft.Json.JsonProperty("subcontractingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubcontractingDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("exAnteSubcontracting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExAnteSubcontracting ExAnteSubcontracting { get; set; }

        [Newtonsoft.Json.JsonProperty("pricePaidForBargainPurchases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract PricePaidForBargainPurchases { get; set; }

        [Newtonsoft.Json.JsonProperty("notPublicFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractAwardNotPublicFields NotPublicFields { get; set; }

        [Newtonsoft.Json.JsonProperty("concessionRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract ConcessionRevenue { get; set; }

        [Newtonsoft.Json.JsonProperty("pricesAndPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract PricesAndPayments { get; set; }

        /// <summary>Any other details relevant to the value of the concession according to Art. 8(3) of the Directive - concession award notices</summary>
        [Newtonsoft.Json.JsonProperty("concessionValueAdditionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ConcessionValueAdditionalInformation { get; set; }


    }

    /// <summary>Directive 2009/81/EY (Defence contract award)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractAwardDefence
    {
        /// <summary>Lot no (not required, if lotinfo.divisionlots = false)</summary>
        [Newtonsoft.Json.JsonProperty("lotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotNumber { get; set; }

        /// <summary>Lot title (not required, if lotinfo.divisionlots = false)</summary>
        [Newtonsoft.Json.JsonProperty("lotTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotTitle { get; set; }

        /// <summary>Contract number</summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNumber { get; set; }

        /// <summary>V.1) Date of contract award decision</summary>
        [Newtonsoft.Json.JsonProperty("contractAwardDecisionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ContractAwardDecisionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumberOfTenders NumberOfTenders { get; set; }

        [Newtonsoft.Json.JsonProperty("contractor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractorContactInformation Contractor { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract EstimatedValue { get; set; }

        /// <summary>Determines whether FinalTotalValue or Highest/Lowest offer value should be given.</summary>
        [Newtonsoft.Json.JsonProperty("contractValueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractAwardDefenceContractValueType? ContractValueType { get; set; }

        [Newtonsoft.Json.JsonProperty("finalTotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract FinalTotalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("lowestOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract LowestOffer { get; set; }

        [Newtonsoft.Json.JsonProperty("highestOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract HighestOffer { get; set; }

        [Newtonsoft.Json.JsonProperty("annualOrMonthlyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame AnnualOrMonthlyValue { get; set; }

        /// <summary>The contract is likely to be subcontracted to third parties.</summary>
        [Newtonsoft.Json.JsonProperty("likelyToBeSubcontracted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LikelyToBeSubcontracted { get; set; }

        [Newtonsoft.Json.JsonProperty("valueOfSubcontract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract ValueOfSubcontract { get; set; }

        /// <summary>Proportion of the contract likely to be subcontracted, 0-100 (%)</summary>
        [Newtonsoft.Json.JsonProperty("proportionOfValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProportionOfValue { get; set; }

        /// <summary>Not known</summary>
        [Newtonsoft.Json.JsonProperty("valueOfSubcontractNotKnown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValueOfSubcontractNotKnown { get; set; }

        /// <summary>Short description of the part of the contract to be subcontracted.</summary>
        [Newtonsoft.Json.JsonProperty("subcontractingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubcontractingDescription { get; set; }

        /// <summary>All or certain subcontracts will be awarded through a competitive procedure (see Title III of Directive 2009/81/EC)</summary>
        [Newtonsoft.Json.JsonProperty("allOrCertainSubcontractsWillBeAwarded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllOrCertainSubcontractsWillBeAwarded { get; set; }

        /// <summary>A share of the contract will be subcontracted through a competitive procedure (see Title III of Directive 2009/81/EC)</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontracted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShareOfContractWillBeSubcontracted { get; set; }

        /// <summary>minimum percentage</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontractedMinPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShareOfContractWillBeSubcontractedMinPercentage { get; set; }

        /// <summary>maximum percentage</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontractedMaxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShareOfContractWillBeSubcontractedMaxPercentage { get; set; }

        /// <summary>Directive 2009/81/EY (Defence contract award)
        /// Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractAwardDefenceValidationState? ValidationState { get; set; }


    }

    /// <summary>Contract Award required fields that are not to be published</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractAwardNotPublicFields
    {
        /// <summary>2.8 Country of origin (EU)</summary>
        [Newtonsoft.Json.JsonProperty("communityOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommunityOrigin { get; set; }

        /// <summary>2.8 Country of origin (Non-EU)</summary>
        [Newtonsoft.Json.JsonProperty("nonCommunityOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonCommunityOrigin { get; set; }

        /// <summary>2.8 List of countries of origin (Non-EU)</summary>
        [Newtonsoft.Json.JsonProperty("countries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Countries { get; set; }

        /// <summary>The contract was awarded to a tenderer who submitted a variant</summary>
        [Newtonsoft.Json.JsonProperty("awardedToTendererWithVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwardedToTendererWithVariant { get; set; }

        /// <summary>Tenders were excluded on the ground that they were abnormally low</summary>
        [Newtonsoft.Json.JsonProperty("abnormallyLowTendersExcluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AbnormallyLowTendersExcluded { get; set; }


    }

    /// <summary>Contact information section for additional contracting body information on Hilma form.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractBodyContactInformation
    {
        /// <summary>Official name of the contracting body</summary>
        [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string OfficialName { get; set; }

        /// <summary>National registration number of the contracting body</summary>
        [Newtonsoft.Json.JsonProperty("nationalRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string NationalRegistrationNumber { get; set; }

        /// <summary>Hilma specific additional specifier for Official Name, to distinguish multiple
        /// departments of same organisation from each other.</summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string Department { get; set; }

        /// <summary>Location code for the organisation</summary>
        [Newtonsoft.Json.JsonProperty("nutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<string> NutsCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostalAddress PostalAddress { get; set; }

        /// <summary>Phone number for the contact. Format is important.</summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string TelephoneNumber { get; set; }

        /// <summary>Contact email.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Email { get; set; }

        /// <summary>Contact point for the organisation.</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string ContactPerson { get; set; }

        /// <summary>Url, including the protocol, for additional info.</summary>
        [Newtonsoft.Json.JsonProperty("mainUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MainUrl { get; set; }

        /// <summary>Vuejs application persistent validation state.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Contact information section for additional contracting body information on Hilma form.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContractorContactInformation
    {
        /// <summary>Contract id, generated by Hilma. Not sent to TED.</summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId { get; set; }

        /// <summary>Official name of the contracting body</summary>
        [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(300)]
        public string OfficialName { get; set; }

        /// <summary>National registration number of the contracting body</summary>
        [Newtonsoft.Json.JsonProperty("nationalRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string NationalRegistrationNumber { get; set; }

        /// <summary>Location code for the organisation</summary>
        [Newtonsoft.Json.JsonProperty("nutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<string> NutsCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostalAddress PostalAddress { get; set; }

        /// <summary>Phone number for the contact. Format is important.</summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string TelephoneNumber { get; set; }

        /// <summary>Contact email.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Email { get; set; }

        /// <summary>Url, including the protocol, for additional info.</summary>
        [Newtonsoft.Json.JsonProperty("mainUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MainUrl { get; set; }

        /// <summary>The contractor is an SME.</summary>
        [Newtonsoft.Json.JsonProperty("isSmallMediumEnterprise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSmallMediumEnterprise { get; set; }

        /// <summary>Vuejs application persistent validation state.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractorContactInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Common Procurement Vocabulary. EU-sanctioned list of
    /// 6000 9-number codes for different products.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CpvCode
    {
        /// <summary>The code itself.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>Clear text explanation for the code. Supplied in the notice language.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Optional 4-letter modifiers for the code.</summary>
        [Newtonsoft.Json.JsonProperty("vocCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VocCode> VocCodes { get; set; }


    }

    /// <summary>Directive 2009/81/EC
    /// IV.3) Administrative information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefenceAdministrativeInformation
    {
        /// <summary>IV.3.2) Previous publication(s) concerning the same contract</summary>
        [Newtonsoft.Json.JsonProperty("previousPublicationExists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreviousPublicationExists { get; set; }

        [Newtonsoft.Json.JsonProperty("previousPriorInformationNoticeOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OjsNumber PreviousPriorInformationNoticeOjsNumber { get; set; }

        /// <summary>If contract award has a previous contract notice ojs number</summary>
        [Newtonsoft.Json.JsonProperty("hasPreviousContractNoticeOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPreviousContractNoticeOjsNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("previousContractNoticeOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OjsNumber PreviousContractNoticeOjsNumber { get; set; }

        /// <summary>If contract award has a previous ex ante ojs number</summary>
        [Newtonsoft.Json.JsonProperty("hasPreviousExAnteOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPreviousExAnteOjsNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("previousExAnteOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OjsNumber PreviousExAnteOjsNumber { get; set; }

        /// <summary>IV.3.3) Conditions for obtaining specifications and additional documents or descriptive document
        /// Time limit for receipt of requests for documents or for accessing documents
        /// Date: [ ] [ ] / [ ] [ ] / [ ] [ ] [ ] [ ] (dd/mm/yyyy) Time: [ ] [ ] : [ ] [ ]</summary>
        [Newtonsoft.Json.JsonProperty("timeLimitForReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TimeLimitForReceipt { get; set; }

        /// <summary>IV.3.3) Conditions for obtaining specifications and additional documents or descriptive document 
        /// Payable documents</summary>
        [Newtonsoft.Json.JsonProperty("payableDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PayableDocuments { get; set; }

        [Newtonsoft.Json.JsonProperty("documentPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract DocumentPrice { get; set; }

        /// <summary>Terms and method of payment</summary>
        [Newtonsoft.Json.JsonProperty("paymentTermsAndMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PaymentTermsAndMethods { get; set; }

        /// <summary>Any or selected EU language type</summary>
        [Newtonsoft.Json.JsonProperty("languageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefenceAdministrativeInformationLanguageType? LanguageType { get; set; }

        /// <summary>IV.3.6) Language(s) in which tenders or requests to participate may be drawn up
        /// Official EU language(s):</summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Languages { get; set; }

        /// <summary>IV.3.6) Language(s) in which tenders or requests to participate may be drawn up
        /// Other -boolean</summary>
        [Newtonsoft.Json.JsonProperty("otherLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OtherLanguage { get; set; }

        /// <summary>IV.3.6) Language(s) in which tenders or requests to participate may be drawn up
        /// Other:</summary>
        [Newtonsoft.Json.JsonProperty("otherLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherLanguages { get; set; }


    }

    /// <summary>Annex C3 - Defence and security
    /// Service categories referred to in Section II: Object of the contract</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefenceCategory
    {
        /// <summary>The code itself.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[3-9]|1[0-9]?|2[0-6]?")]
        public string Code { get; set; }

        /// <summary>Clear text explanation for the code.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    /// <summary>II.2.3) Information about renewals</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefenceRenewals
    {
        /// <summary>If the notice can be renewed after the duration.</summary>
        [Newtonsoft.Json.JsonProperty("canBeRenewed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanBeRenewed { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("subsequentContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame SubsequentContract { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Esender
    {
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }

        [Newtonsoft.Json.JsonProperty("customerLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerLogin { get; set; }

        [Newtonsoft.Json.JsonProperty("tedNoDocExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TedNoDocExt { get; set; }


    }

    /// <summary>Describes EU-funding for this tender.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EuFunds
    {
        /// <summary>If EU funds are going to be used.</summary>
        [Newtonsoft.Json.JsonProperty("procurementRelatedToEuProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProcurementRelatedToEuProgram { get; set; }

        /// <summary>EU funding project number. Applicable if EU funds are used.</summary>
        [Newtonsoft.Json.JsonProperty("projectIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProjectIdentification { get; set; }


    }

    /// <summary>Contains random defense specific subcontracting fields.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExAnteSubcontracting
    {
        /// <summary>All or certain subcontracts will be awarded through a competitive procedure (see Title III of Directive 2009/81/EC)</summary>
        [Newtonsoft.Json.JsonProperty("allOrCertainSubcontractsWillBeAwarded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllOrCertainSubcontractsWillBeAwarded { get; set; }

        /// <summary>A share of the contract will be subcontracted through a competitive procedure (see Title III of Directive 2009/81/EC)</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontracted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShareOfContractWillBeSubcontracted { get; set; }

        /// <summary>Minimum percentage</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontractedMinPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShareOfContractWillBeSubcontractedMinPercentage { get; set; }

        /// <summary>Maximum percentage</summary>
        [Newtonsoft.Json.JsonProperty("shareOfContractWillBeSubcontractedMaxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ShareOfContractWillBeSubcontractedMaxPercentage { get; set; }


    }

    /// <summary>V.1.3) Information about a framework agreement or a dynamic purchasing system</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FrameworkAgreementInformation
    {
        /// <summary>The procurement involves the establishment of a framework agreement</summary>
        [Newtonsoft.Json.JsonProperty("includesFrameworkAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludesFrameworkAgreement { get; set; }

        /// <summary>Directive 2009/81/EC
        /// The procurement involves the establishment of a framework agreement (incorrect in TED form - correct value in Excel)</summary>
        [Newtonsoft.Json.JsonProperty("includesConclusionOfFrameworkAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludesConclusionOfFrameworkAgreement { get; set; }

        /// <summary>Defines if framework agreement for single or several providers</summary>
        [Newtonsoft.Json.JsonProperty("frameworkAgreementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameworkAgreementInformationFrameworkAgreementType? FrameworkAgreementType { get; set; }

        /// <summary>Envisaged maximum number of participants to the framework agreement</summary>
        [Newtonsoft.Json.JsonProperty("envisagedNumberOfParticipants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvisagedNumberOfParticipants { get; set; }

        /// <summary>Directive 2009/81/EC
        /// II.1.4) Information on framework agreement 
        /// Framework agreement with several operators -&gt; Number exact or max</summary>
        [Newtonsoft.Json.JsonProperty("frameworkEnvisagedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameworkAgreementInformationFrameworkEnvisagedType? FrameworkEnvisagedType { get; set; }

        /// <summary>The procurement involves the setting up of a dynamic purchasing system</summary>
        [Newtonsoft.Json.JsonProperty("includesDynamicPurchasingSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludesDynamicPurchasingSystem { get; set; }

        /// <summary>The dynamic purchasing system might be used by additional purchasers</summary>
        [Newtonsoft.Json.JsonProperty("dynamicPurchasingSystemInvolvesAdditionalPurchasers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DynamicPurchasingSystemInvolvesAdditionalPurchasers { get; set; }

        /// <summary>In the case of framework agreements, provide justification for any duration exceeding 4 years</summary>
        [Newtonsoft.Json.JsonProperty("justificationForDurationOverFourYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForDurationOverFourYears { get; set; }

        /// <summary>Directive 2009/81/EC (Defence contracts)
        /// In the case of framework agreements, provide justification for any duration exceeding 7 years</summary>
        [Newtonsoft.Json.JsonProperty("justificationForDurationOverSevenYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForDurationOverSevenYears { get; set; }

        /// <summary>In the case of framework agreements, provide justification for any duration exceeding 8 years</summary>
        [Newtonsoft.Json.JsonProperty("justificationForDurationOverEightYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForDurationOverEightYears { get; set; }

        /// <summary>If DPS was terminated. Used when creating a contract award.</summary>
        [Newtonsoft.Json.JsonProperty("dynamicPurchasingSystemWasTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DynamicPurchasingSystemWasTerminated { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedTotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract EstimatedTotalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame Duration { get; set; }

        /// <summary>Directive 2009/81/EC
        /// Frequency and value of the contracts to be awarded</summary>
        [Newtonsoft.Json.JsonProperty("frequencyAndValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FrequencyAndValue { get; set; }


    }

    /// <summary>Hilma related statistical information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HilmaStatistics
    {
        /// <summary>The procurement takes energy efficiency into consideration</summary>
        [Newtonsoft.Json.JsonProperty("energyEfficiencyConsidered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnergyEfficiencyConsidered { get; set; }

        /// <summary>The procurement takes innovations into consideration</summary>
        [Newtonsoft.Json.JsonProperty("innovationConsidered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InnovationConsidered { get; set; }

        /// <summary>The procurement is inclusive to SMEs.</summary>
        [Newtonsoft.Json.JsonProperty("smeParticipationConsidered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SmeParticipationConsidered { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HilmaStatisticsValidationState? ValidationState { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Link
    {
        /// <summary>Url for the linked document or website</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>Optional description for the link or website</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }


    }

    /// <summary>Information about partitioning of the notice. On corrigendum notices, none of these fields should be changed.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LotsInfo
    {
        /// <summary>If the notice is partitioned.</summary>
        [Newtonsoft.Json.JsonProperty("divisionLots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DivisionLots { get; set; }

        /// <summary>Into how many partitions the notice is split into. Needs to be at least 2
        /// and front-end limits it to 999, to avoid performance hits. Seem to work
        /// with 10000 just fine, but slow. Crashes on 2000000.</summary>
        [Newtonsoft.Json.JsonProperty("quantityOfLots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuantityOfLots { get; set; }

        /// <summary>Limitation type for tenders concerning how many lots one can cover.</summary>
        [Newtonsoft.Json.JsonProperty("lotsSubmittedFor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LotsInfoLotsSubmittedFor? LotsSubmittedFor { get; set; }

        /// <summary>If the LotsSubmittedFor=LotsMax, the number of lots tender can concern.</summary>
        [Newtonsoft.Json.JsonProperty("lotsSubmittedForQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LotsSubmittedForQuantity { get; set; }

        /// <summary>Is there a max number of lots awarded for one candidate?</summary>
        [Newtonsoft.Json.JsonProperty("lotsMaxAwarded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LotsMaxAwarded { get; set; }

        /// <summary>If there is a max number of lots awarded for a candidate, the number.</summary>
        [Newtonsoft.Json.JsonProperty("lotsMaxAwardedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LotsMaxAwardedQuantity { get; set; }

        /// <summary>If the contracting authority reserves a right to combine lots.</summary>
        [Newtonsoft.Json.JsonProperty("lotCombinationPossible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LotCombinationPossible { get; set; }

        /// <summary>Free text description describing the possible lot combinations, criteria etc.</summary>
        [Newtonsoft.Json.JsonProperty("lotCombinationPossibleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LotCombinationPossibleDescription { get; set; }

        /// <summary>Vuejs application form validation state for corresponding section.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LotsInfoValidationState? ValidationState { get; set; }


    }

    /// <summary>Section VII: Modifications to the contract/concession</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Modifications
    {
        [Newtonsoft.Json.JsonProperty("mainCpvCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpvCode MainCpvCode { get; set; }

        /// <summary>VII.1.2) Additional CPV code(s)</summary>
        [Newtonsoft.Json.JsonProperty("additionalCpvCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpvCode> AdditionalCpvCodes { get; set; }

        /// <summary>VII.1.3) Place of performance</summary>
        [Newtonsoft.Json.JsonProperty("nutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NutsCodes { get; set; }

        /// <summary>VII.1.3) Place of performance</summary>
        [Newtonsoft.Json.JsonProperty("mainsiteplaceWorksDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MainsiteplaceWorksDelivery { get; set; }

        /// <summary>VII.1.4) Description of the procurement:
        /// (nature and quantity of works, supplies or services)</summary>
        [Newtonsoft.Json.JsonProperty("descrProcurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DescrProcurement { get; set; }

        [Newtonsoft.Json.JsonProperty("timeFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame TimeFrame { get; set; }

        /// <summary>Directive 2014/24/EU – In the case of framework agreements, provide justification for any duration exceeding 4 years</summary>
        [Newtonsoft.Json.JsonProperty("justificationForDurationOverFourYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForDurationOverFourYears { get; set; }

        /// <summary>Directive 2014/25/EU – In the case of framework agreements, provide justification for any duration exceeding 8 years:</summary>
        [Newtonsoft.Json.JsonProperty("justificationForDurationOverEightYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForDurationOverEightYears { get; set; }

        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract TotalValue { get; set; }

        /// <summary>The contract/concession has been awarded to a group of economic operators ◯ yes ◯ no</summary>
        [Newtonsoft.Json.JsonProperty("awardedToGroupOfEconomicOperators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AwardedToGroupOfEconomicOperators { get; set; }

        /// <summary>VII.1.7) Name and address of the contractor/concessionaire</summary>
        [Newtonsoft.Json.JsonProperty("contractors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractorContactInformation> Contractors { get; set; }

        /// <summary>Description of the modifications
        /// Nature and extent of the modifications (with indication of possible earlier changes to the contract)</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        /// <summary>Reasons for modification</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModificationsReason? Reason { get; set; }

        /// <summary>Description of the economic or technical reasons and the inconvenience or duplication of cost preventing a change of contractor</summary>
        [Newtonsoft.Json.JsonProperty("reasonDescriptionEconomic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReasonDescriptionEconomic { get; set; }

        /// <summary>Description of the circumstances which rendered the modification necessary and explanation of the unforeseen nature of these circumstances</summary>
        [Newtonsoft.Json.JsonProperty("reasonDescriptionCircumstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReasonDescriptionCircumstances { get; set; }

        [Newtonsoft.Json.JsonProperty("increaseBeforeModifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract IncreaseBeforeModifications { get; set; }

        [Newtonsoft.Json.JsonProperty("increaseAfterModifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract IncreaseAfterModifications { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModificationsValidationState? ValidationState { get; set; }


    }

    /// <summary>Modification information. For Hilma use only</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Modifier
    {
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModified { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }


    }

    /// <summary>Information on why there was no contract awarded.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NonAward
    {
        /// <summary>Why no contract has been awarded</summary>
        [Newtonsoft.Json.JsonProperty("failureReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonAwardFailureReason? FailureReason { get; set; }

        /// <summary>How was the original notice submitted</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NonAwardOriginalNoticeSentVia? OriginalNoticeSentVia { get; set; }

        [Newtonsoft.Json.JsonProperty("originalEsender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Esender OriginalEsender { get; set; }

        /// <summary>Which other method was used to submit the original notice.</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentViaOther", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string OriginalNoticeSentViaOther { get; set; }

        /// <summary>Date of original notice submission.</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginalNoticeSentDate { get; set; }


    }

    /// <summary>Data contract describing a notice to vuejs app.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NoticeContract
    {
        /// <summary>Primary key of ne notice.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>ProjectId of the project this notice belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("procurementProjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcurementProjectId { get; set; }

        /// <summary>If the notice is parented, the id of the parent.</summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>If notice is fixed, set its child FK.</summary>
        [Newtonsoft.Json.JsonProperty("corrigendumId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CorrigendumId { get; set; }

        /// <summary>Hilma notice number, formatting [year]-[id].
        /// Assigned by Hilma. Used as TED No Doc Ext.</summary>
        [Newtonsoft.Json.JsonProperty("noticeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoticeNumber { get; set; }

        /// <summary>Is reduced time limits for receiving tenders applied to this notice. Only for Contact notices.</summary>
        [Newtonsoft.Json.JsonProperty("reducedTimeLimitsForReceiptOfTenders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReducedTimeLimitsForReceiptOfTenders { get; set; }

        /// <summary>VII.2) Other additional information for why the corrigendum was made.</summary>
        [Newtonsoft.Json.JsonProperty("corrigendumAdditionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CorrigendumAdditionalInformation { get; set; }

        /// <summary>Notice number (no doc ext) of the previous notice for corrigendum</summary>
        [Newtonsoft.Json.JsonProperty("corrigendumPreviousNoticeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrigendumPreviousNoticeNumber { get; set; }

        /// <summary>Creatign system name, either Hilma or Sending ets system.</summary>
        [Newtonsoft.Json.JsonProperty("creatorSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatorSystem { get; set; }

        /// <summary>Creator Id for user-created (as opposed to Ets API created) notices.</summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? CreatorId { get; set; }

        /// <summary>Type of the notice. See Hilma.Domain.Enums.NoticeType for more details.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoticeContractType? Type { get; set; }

        /// <summary>The regulation number that is used as a legal basis for the notice</summary>
        [Newtonsoft.Json.JsonProperty("legalBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalBasis { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContract Project { get; set; }

        [Newtonsoft.Json.JsonProperty("lotsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LotsInfo LotsInfo { get; set; }

        /// <summary>II.2) Description
        /// The partitions of the notice. If not partitioned, the one partition contained
        /// holds the information for entire notice.</summary>
        [Newtonsoft.Json.JsonProperty("objectDescriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ObjectDescription> ObjectDescriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("communicationInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInformation CommunicationInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("procurementObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementObject ProcurementObject { get; set; }

        [Newtonsoft.Json.JsonProperty("conditionsInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformation ConditionsInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("conditionsInformationDefence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformationDefence ConditionsInformationDefence { get; set; }

        [Newtonsoft.Json.JsonProperty("conditionsInformationNational", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionsInformationNational ConditionsInformationNational { get; set; }

        [Newtonsoft.Json.JsonProperty("complementaryInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComplementaryInformation ComplementaryInformation { get; set; }

        /// <summary>Hilma publication date.</summary>
        [Newtonsoft.Json.JsonProperty("datePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DatePublished { get; set; }

        /// <summary>Status of publication to Hilma.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoticeContractState? State { get; set; }

        /// <summary>Status of publication to TED.</summary>
        [Newtonsoft.Json.JsonProperty("tedPublishState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoticeContractTedPublishState? TedPublishState { get; set; }

        /// <summary>TED assigned submission id for this notice.</summary>
        [Newtonsoft.Json.JsonProperty("tedSubmissionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TedSubmissionId { get; set; }

        /// <summary>Failure code from ted, in case publication has failed.</summary>
        [Newtonsoft.Json.JsonProperty("tedReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TedReasonCode { get; set; }

        /// <summary>Timestamp for initiation of ted publication process</summary>
        [Newtonsoft.Json.JsonProperty("tedPublishRequestSentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TedPublishRequestSentDate { get; set; }

        [Newtonsoft.Json.JsonProperty("tedPublicationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TedPublicationInfo TedPublicationInfo { get; set; }

        /// <summary>Errors returned by TED</summary>
        [Newtonsoft.Json.JsonProperty("tedValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TedValidationReport> TedValidationErrors { get; set; }

        /// <summary>Ted assigned identifier
        /// Ojs: Open Journal System</summary>
        [Newtonsoft.Json.JsonProperty("noticeOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoticeOjsNumber { get; set; }

        /// <summary>Ted assigned identifier of the previous notice, if this one
        /// is a continuation. Automatically filled, if created as child,
        /// manually filled for standalone notices, that require it.</summary>
        [Newtonsoft.Json.JsonProperty("previousNoticeOjsNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousNoticeOjsNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("procedureInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformation ProcedureInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("tenderingInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderingInformation TenderingInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("rewardsAndJury", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RewardsAndJury RewardsAndJury { get; set; }

        [Newtonsoft.Json.JsonProperty("resultsOfContest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultsOfContest ResultsOfContest { get; set; }

        /// <summary>Another TED assigned identifier. They never end.</summary>
        [Newtonsoft.Json.JsonProperty("tedNoDocExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TedNoDocExt { get; set; }

        /// <summary>List of links attached to this notice.</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Links { get; set; }

        /// <summary>Attachments for this notice, as SAS-links.</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentViewModel> Attachments { get; set; }

        /// <summary>Notice has Attachments or Links.</summary>
        [Newtonsoft.Json.JsonProperty("hasAttachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAttachments { get; set; }

        /// <summary>Notice changes for corrigendum notice</summary>
        [Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Change> Changes { get; set; }

        /// <summary>If notice is a corrigendum</summary>
        [Newtonsoft.Json.JsonProperty("isCorrigendum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCorrigendum { get; set; }

        /// <summary>Set to true if notice is migrated from previous Hilma</summary>
        [Newtonsoft.Json.JsonProperty("isMigrated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMigrated { get; set; }

        /// <summary>If national notice has been cancelled</summary>
        [Newtonsoft.Json.JsonProperty("isCancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCancelled { get; set; }

        /// <summary>Why the national notice has been cancelled</summary>
        [Newtonsoft.Json.JsonProperty("cancelledReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CancelledReason { get; set; }

        /// <summary>If notice is the latest version. Needed for search functionality when notice has children.</summary>
        [Newtonsoft.Json.JsonProperty("isLatest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLatest { get; set; }

        /// <summary>Language for notice to be published in to TED.</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("proceduresForReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProceduresForReviewInformation ProceduresForReview { get; set; }

        [Newtonsoft.Json.JsonProperty("attachmentInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttachmentInformation AttachmentInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("modifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Modifications Modifications { get; set; }

        /// <summary>Directive 2009/81/EC (Defence notices)
        /// Section V: Award of contract</summary>
        [Newtonsoft.Json.JsonProperty("contractAwardsDefence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractAwardDefence> ContractAwardsDefence { get; set; }

        [Newtonsoft.Json.JsonProperty("hilmaStatistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HilmaStatistics HilmaStatistics { get; set; }

        [Newtonsoft.Json.JsonProperty("annexes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Annex Annexes { get; set; }

        /// <summary>Modification information. For Hilma use only</summary>
        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modifier> Modifiers { get; set; }

        /// <summary>Department for this notice. For Hilma use only, at least for now. For UI, serves as a hint on which
        /// departments data should be auto-filled to organisation fields.</summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DepartmentId { get; set; }

        /// <summary>Should notice not be published to search index. Only for national small value procurements</summary>
        [Newtonsoft.Json.JsonProperty("isPrivateSmallValueProcurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivateSmallValueProcurement { get; set; }

        /// <summary>When tendering is done in Hilma, specifies when the questions about the procurement to the buyer must be sent at the lastest</summary>
        [Newtonsoft.Json.JsonProperty("procurementQuestionDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcurementQuestionDueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("tenderDocumentSections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderDocumentSections TenderDocumentSections { get; set; }

        /// <summary>Creation time of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateCreated { get; set; }

        /// <summary>Latest update time of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModified { get; set; }


    }

    /// <summary>Statistics about number of tenders received.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NumberOfTenders
    {
        /// <summary>If the information in this section is confidential and should not be published on TED, it must be indicated by selecting false.</summary>
        [Newtonsoft.Json.JsonProperty("disagreeTenderInformationToBePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeTenderInformationToBePublished { get; set; }

        /// <summary>Total number of tenders received.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>Number of tenders received from SMEs
        /// (SME – as defined in Commission Recommendation 2003/361/EC)</summary>
        [Newtonsoft.Json.JsonProperty("sme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sme { get; set; }

        /// <summary>Tenders received from other eu states.</summary>
        [Newtonsoft.Json.JsonProperty("otherEu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OtherEu { get; set; }

        /// <summary>Tenders received from non-eu states.</summary>
        [Newtonsoft.Json.JsonProperty("nonEu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NonEu { get; set; }

        /// <summary>Tenders received by electronic means.</summary>
        [Newtonsoft.Json.JsonProperty("electronic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Electronic { get; set; }


    }

    /// <summary>II.2) Description (lot)
    /// Describes target of the tender described by the notice.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ObjectDescription
    {
        /// <summary>Name of the object. Omitted if the notice is not split into lots.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>Lot number. Needed for corrigendums</summary>
        [Newtonsoft.Json.JsonProperty("lotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LotNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("mainCpvCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpvCode MainCpvCode { get; set; }

        /// <summary>Directive 2009/81/EC
        /// Annex B
        /// 3) Quantity or scope</summary>
        [Newtonsoft.Json.JsonProperty("quantityOrScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QuantityOrScope { get; set; }

        /// <summary>Specifiers for the target of the procurement described by this object.</summary>
        [Newtonsoft.Json.JsonProperty("additionalCpvCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpvCode> AdditionalCpvCodes { get; set; }

        /// <summary>Location specifiers for the object.</summary>
        [Newtonsoft.Json.JsonProperty("nutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NutsCodes { get; set; }

        /// <summary>Describes the location in more granular manner than the nuts codes in free text.</summary>
        [Newtonsoft.Json.JsonProperty("mainsiteplaceWorksDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MainsiteplaceWorksDelivery { get; set; }

        /// <summary>Describes the object in free text.</summary>
        [Newtonsoft.Json.JsonProperty("descrProcurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DescrProcurement { get; set; }

        /// <summary>Agree to publish</summary>
        [Newtonsoft.Json.JsonProperty("disagreeAwardCriteriaToBePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeAwardCriteriaToBePublished { get; set; }

        [Newtonsoft.Json.JsonProperty("awardCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriteria AwardCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract EstimatedValue { get; set; }

        [Newtonsoft.Json.JsonProperty("timeFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame TimeFrame { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateNumberRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CandidateNumberRestrictions CandidateNumberRestrictions { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsAndVariants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptionsAndVariants OptionsAndVariants { get; set; }

        /// <summary>If the offers must be presented as electronic catalogs.</summary>
        [Newtonsoft.Json.JsonProperty("tendersMustBePresentedAsElectronicCatalogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TendersMustBePresentedAsElectronicCatalogs { get; set; }

        [Newtonsoft.Json.JsonProperty("euFunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EuFunds EuFunds { get; set; }

        /// <summary>More free text information about the project.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("awardContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Award AwardContract { get; set; }

        [Newtonsoft.Json.JsonProperty("qualificationSystemDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualificationSystemDuration QualificationSystemDuration { get; set; }

        /// <summary>Validation state</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectDescriptionValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC (Defence notices!)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OjsNumber
    {
        /// <summary>Ojs number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>Of</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }


    }

    /// <summary>Describes what options and variants offers may include.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OptionsAndVariants
    {
        /// <summary>If other solution than the one described in the notice can be accepted.</summary>
        [Newtonsoft.Json.JsonProperty("variantsWillBeAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VariantsWillBeAccepted { get; set; }

        /// <summary>Partial offers for national agriculture notice contracts</summary>
        [Newtonsoft.Json.JsonProperty("partialOffersWillBeAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartialOffersWillBeAccepted { get; set; }

        /// <summary>Will there be option for additional purchases.</summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Options { get; set; }

        /// <summary>Description of options in free text. Only valid if Options=true.</summary>
        [Newtonsoft.Json.JsonProperty("optionsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OptionsDescription { get; set; }

        /// <summary>Directive 2009/81/EC (Defence contracts)
        /// Determines if options are set in days or months.</summary>
        [Newtonsoft.Json.JsonProperty("optionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptionsAndVariantsOptionType? OptionType { get; set; }

        /// <summary>Directive 2009/81/EC (Defence contracts)
        /// Duration of time frame in days, if used has selected to insert the time frame in days.</summary>
        [Newtonsoft.Json.JsonProperty("optionsDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OptionsDays { get; set; }

        /// <summary>Directive 2009/81/EC (Defence contracts)
        /// Duration of time frame in months, if used has selected to insert the time frame in months.</summary>
        [Newtonsoft.Json.JsonProperty("optionsMonths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OptionsMonths { get; set; }


    }

    /// <summary>Describes an organisation to vuejs app.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrganisationContract
    {
        /// <summary>Hilma assigned primary key for the organisation.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation Information { get; set; }

        /// <summary>Type of the contracting authority</summary>
        [Newtonsoft.Json.JsonProperty("contractingAuthorityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractContractingAuthorityType? ContractingAuthorityType { get; set; }

        /// <summary>Asked if ContractingAuthorityType is "Other"</summary>
        [Newtonsoft.Json.JsonProperty("otherContractingAuthorityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string OtherContractingAuthorityType { get; set; }

        /// <summary>Used in F15, F24 and F25 to determine type of main activity:
        ///  (in the case of a notice published by a contracting authority -&gt; MainActivity)
        ///  or
        ///  (in the case of a notice published by a contracting entity -&gt; MainActivityUtilities )</summary>
        [Newtonsoft.Json.JsonProperty("contractingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractContractingType? ContractingType { get; set; }

        /// <summary>Primary field of operations of the organisation.</summary>
        [Newtonsoft.Json.JsonProperty("mainActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractMainActivity? MainActivity { get; set; }

        /// <summary>Asked if MainActivity is "Other"</summary>
        [Newtonsoft.Json.JsonProperty("otherMainActivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherMainActivity { get; set; }

        /// <summary>Main activity utilities.</summary>
        [Newtonsoft.Json.JsonProperty("mainActivityUtilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractMainActivityUtilities? MainActivityUtilities { get; set; }

        /// <summary>Vuejs application validation state for organisation section.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractValidationState? ValidationState { get; set; }

        /// <summary>Organisation data source</summary>
        [Newtonsoft.Json.JsonProperty("dataSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContractDataSource? DataSource { get; set; }

        /// <summary>Currently selected department for this organisation.</summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DepartmentId { get; set; }

        /// <summary>Used with ParticipatingOrganisation - Tendering organisation</summary>
        [Newtonsoft.Json.JsonProperty("identifierMissing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IdentifierMissing { get; set; }

        /// <summary>Used with ParticipatingOrganisation - Tendering organisation</summary>
        [Newtonsoft.Json.JsonProperty("whyIdentifierIsMissing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WhyIdentifierIsMissing { get; set; }


    }

    /// <summary>Represents an address.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostalAddress
    {
        /// <summary>Street address.</summary>
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }

        /// <summary>Postal/zip code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>The town for the address.</summary>
        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Town { get; set; }

        /// <summary>The country for the address.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }


    }

    /// <summary>Section IV: Procedure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcedureInformation
    {
        /// <summary>IV.1.1) Type of procedure
        /// Type of procedure</summary>
        [Newtonsoft.Json.JsonProperty("procedureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationProcedureType? ProcedureType { get; set; }

        /// <summary>IV.1.1) Type of procedure
        ///  Accelerated procedure</summary>
        [Newtonsoft.Json.JsonProperty("acceleratedProcedure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceleratedProcedure { get; set; }

        /// <summary>IV.1.1) Type of procedure
        /// Justification for accelerated procedure</summary>
        [Newtonsoft.Json.JsonProperty("justificationForAcceleratedProcedure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JustificationForAcceleratedProcedure { get; set; }

        /// <summary>IV.1.2) Type of contest</summary>
        [Newtonsoft.Json.JsonProperty("contestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationContestType? ContestType { get; set; }

        [Newtonsoft.Json.JsonProperty("contestParticipants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract ContestParticipants { get; set; }

        [Newtonsoft.Json.JsonProperty("frameworkAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameworkAgreementInformation FrameworkAgreement { get; set; }

        /// <summary>IV.1.4) Information about reduction of the number of solutions or tenders during negotiation or dialogue
        /// Recourse to staged procedure to gradually reduce the number of solutions to be discussed or tenders to be negotiated</summary>
        [Newtonsoft.Json.JsonProperty("reductionRecourseToReduceNumberOfSolutions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReductionRecourseToReduceNumberOfSolutions { get; set; }

        /// <summary>IV.1.5) Information about negotiation
        /// The contracting authority reserves the right to award the contract on the basis of the initial tenders without conducting negotiations</summary>
        [Newtonsoft.Json.JsonProperty("reserveRightToAwardWithoutNegotiations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReserveRightToAwardWithoutNegotiations { get; set; }

        /// <summary>IV.1.6) Information about electronic auction
        /// An electronic auction will be used</summary>
        [Newtonsoft.Json.JsonProperty("electronicAuctionWillBeUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ElectronicAuctionWillBeUsed { get; set; }

        /// <summary>IV.1.6) Information about electronic auction
        /// Additional information about electronic auction</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformationAboutElectronicAuction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalInformationAboutElectronicAuction { get; set; }

        /// <summary>IV.1.7) Names of participants already selected: 1 (in the case of a restricted contest)</summary>
        [Newtonsoft.Json.JsonProperty("namesOfParticipantsAlreadySelected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NamesOfParticipantsAlreadySelected { get; set; }

        /// <summary>IV.1.8) Information about the Government Procurement Agreement (GPA)</summary>
        [Newtonsoft.Json.JsonProperty("procurementGovernedByGPA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProcurementGovernedByGPA { get; set; }

        /// <summary>IV.1.9) Criteria for the evaluation of projects</summary>
        [Newtonsoft.Json.JsonProperty("criteriaForEvaluationOfProjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CriteriaForEvaluationOfProjects { get; set; }

        /// <summary>Disagree to publish whatever is in CriteriaForEvaluationOfProjects</summary>
        [Newtonsoft.Json.JsonProperty("disagreeCriteriaForEvaluationOfProjectsPublish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeCriteriaForEvaluationOfProjectsPublish { get; set; }

        /// <summary>IV.1.10 Identification of the national rules applicable to the procedure</summary>
        [Newtonsoft.Json.JsonProperty("urlNationalProcedure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlNationalProcedure { get; set; }

        /// <summary>IV.1.11 Main features of the award procedure</summary>
        [Newtonsoft.Json.JsonProperty("mainFeaturesAward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MainFeaturesAward { get; set; }

        [Newtonsoft.Json.JsonProperty("defence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationDefence Defence { get; set; }

        [Newtonsoft.Json.JsonProperty("national", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationNational National { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC
    /// Section IV: Procedure</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcedureInformationDefence
    {
        [Newtonsoft.Json.JsonProperty("candidateNumberRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CandidateNumberRestrictions CandidateNumberRestrictions { get; set; }

        [Newtonsoft.Json.JsonProperty("awardCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardCriteriaDefence AwardCriteria { get; set; }


    }

    /// <summary>Procedure information for national contracts</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcedureInformationNational
    {
        /// <summary>If national notice and procedure type = other
        /// Eligibility requirements for candidates or tenderers
        /// Ehdokkaiden tai tarjoajien soveltuvuutta koskevat vaatimukset</summary>
        [Newtonsoft.Json.JsonProperty("otherProcedure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OtherProcedure { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalProcedureInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalProcedureInformation { get; set; }

        /// <summary>Used in national transparency notices
        /// Ilmoituksen tyyppi</summary>
        [Newtonsoft.Json.JsonProperty("transparencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedureInformationNationalTransparencyType? TransparencyType { get; set; }

        /// <summary>Used in national transparency notices
        /// Menettelyyn valitaan rajoitettu määrä osallistujia</summary>
        [Newtonsoft.Json.JsonProperty("limitedNumberOfParticipants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LimitedNumberOfParticipants { get; set; }

        /// <summary>Used in national transparency notices
        /// jos kyllä: kuinka monta / valittavien osallistujien enimmäismäärä</summary>
        [Newtonsoft.Json.JsonProperty("numberOfParticipants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfParticipants { get; set; }

        /// <summary>Used in national transparency notices
        /// Valintaperuste
        /// (jos menettelyyn sisältyy valintaa)</summary>
        [Newtonsoft.Json.JsonProperty("selectionCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SelectionCriteria { get; set; }


    }

    /// <summary>VI.4) Procedures for review</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProceduresForReviewInformation
    {
        [Newtonsoft.Json.JsonProperty("reviewBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractBodyContactInformation ReviewBody { get; set; }

        /// <summary>Precise information on deadline(s) for review procedures</summary>
        [Newtonsoft.Json.JsonProperty("reviewProcedure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReviewProcedure { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProceduresForReviewInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Section II: Object</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcurementObject
    {
        /// <summary>II.1.4) Short description</summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShortDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract EstimatedValue { get; set; }

        /// <summary>II.1.5.3 Method used for calculating the estimated value of the concession</summary>
        [Newtonsoft.Json.JsonProperty("estimatedValueCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EstimatedValueCalculationMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("mainCpvCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CpvCode MainCpvCode { get; set; }

        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract TotalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("defence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementObjectDefence Defence { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementObjectValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC
    /// Section II: Object of the contract
    /// Procurement object for defence contracts</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcurementObjectDefence
    {
        /// <summary>Main site or location of works, place of delivery or of performance</summary>
        [Newtonsoft.Json.JsonProperty("mainsiteplaceWorksDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MainsiteplaceWorksDelivery { get; set; }

        /// <summary>Location specifiers for the object.</summary>
        [Newtonsoft.Json.JsonProperty("nutsCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NutsCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("frameworkAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrameworkAgreementInformation FrameworkAgreement { get; set; }

        /// <summary>II.5 for prior
        /// II.1.6 for contract
        /// II.1.5 for award</summary>
        [Newtonsoft.Json.JsonProperty("additionalCpvCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CpvCode> AdditionalCpvCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("subcontract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubcontractingInformation Subcontract { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsAndVariants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptionsAndVariants OptionsAndVariants { get; set; }

        [Newtonsoft.Json.JsonProperty("totalQuantityOrScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContract TotalQuantityOrScope { get; set; }

        /// <summary>Total quantity or scope (text)</summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TotalQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("renewals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefenceRenewals Renewals { get; set; }

        [Newtonsoft.Json.JsonProperty("timeFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame TimeFrame { get; set; }

        /// <summary>Prior information!
        /// II.7) Additional information</summary>
        [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalInformation { get; set; }


    }

    /// <summary>Describes a procurement project.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcurementProjectContract
    {
        /// <summary>Hilma assigned primary key.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>Title displayed for this notice in various UIs</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>Type of procurement according to TED taxonomy. This limits
        /// what CPV codes are acceptable, for example. Is not always
        /// intuitive at all.</summary>
        [Newtonsoft.Json.JsonProperty("contractType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractContractType? ContractType { get; set; }

        /// <summary>Selection to to help select correct directive and form when later
        /// creating a notice.</summary>
        [Newtonsoft.Json.JsonProperty("procurementCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractProcurementCategory? ProcurementCategory { get; set; }

        /// <summary>User assigned reference number</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>I.1.2.1) The contract involves join purchase.</summary>
        [Newtonsoft.Json.JsonProperty("jointProcurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JointProcurement { get; set; }

        /// <summary>I.1.2.2) Reference to applicable law related to JointProcurement.</summary>
        [Newtonsoft.Json.JsonProperty("procurementLaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProcurementLaw { get; set; }

        /// <summary>I.1.2.3) Contract is awarded by a central purchasing body.</summary>
        [Newtonsoft.Json.JsonProperty("centralPurchasing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralPurchasing { get; set; }

        /// <summary>List of co-purchasers in a joint purchase.</summary>
        [Newtonsoft.Json.JsonProperty("coPurchasers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractBodyContactInformation> CoPurchasers { get; set; }

        /// <summary>Creator Id for user created procurement projects. Ets API
        /// created projects do not have a creator. The entities instead
        /// have EtsCreator, but those are not to be mapped into
        /// this type of contract for now.</summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? CreatorId { get; set; }

        /// <summary>Vuejs application validation state for organisation form section.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractValidationState? ValidationState { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganisationContract Organisation { get; set; }

        /// <summary>Publication status to Hilma. Goes to public when atleast once
        /// notice in the project goes public.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractState? State { get; set; }

        /// <summary>If defence contract and ContractType = Works: use this enum</summary>
        [Newtonsoft.Json.JsonProperty("defenceWorks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractDefenceWorks? DefenceWorks { get; set; }

        /// <summary>If defence contract and ContractType = Supplies: use this enum</summary>
        [Newtonsoft.Json.JsonProperty("defenceSupplies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractDefenceSupplies? DefenceSupplies { get; set; }

        [Newtonsoft.Json.JsonProperty("defenceCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefenceCategory DefenceCategory { get; set; }

        /// <summary>If defence contract award and DefenceCategory &gt; 20, this should to be set.</summary>
        [Newtonsoft.Json.JsonProperty("disagreeToPublishNoticeBasedOnDefenceServiceCategory4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeToPublishNoticeBasedOnDefenceServiceCategory4 { get; set; }

        /// <summary>If notices under this project should be published to TED as well.</summary>
        [Newtonsoft.Json.JsonProperty("publish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractPublish? Publish { get; set; }

        /// <summary>If NoticeType == NationalAgricultureContract and ContractType == Works</summary>
        [Newtonsoft.Json.JsonProperty("agricultureWorks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractAgricultureWorks? AgricultureWorks { get; set; }

        /// <summary>Used by Hilma App.
        /// If project is private (salainen)
        /// Normally projects that have not been published can be viewed by all employees.
        /// Not published notices is still limited to collabs only.
        /// Private projects are visible only to collaborators, until a notice is published.</summary>
        [Newtonsoft.Json.JsonProperty("isPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        /// <summary>Is procurement concluded
        /// Affects how the procurement is shown to the user</summary>
        [Newtonsoft.Json.JsonProperty("isConcluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConcluded { get; set; }

        /// <summary>If tendering is done in Hilma or elsewhere</summary>
        [Newtonsoft.Json.JsonProperty("tendering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcurementProjectContractTendering? Tendering { get; set; }

        /// <summary>Creation time of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateCreated { get; set; }

        /// <summary>Latest update time of the entity.</summary>
        [Newtonsoft.Json.JsonProperty("dateModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModified { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QualificationSystemCondition
    {
        /// <summary>Conditions to be fulfilled by economic operators in view of their qualification</summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Conditions { get; set; }

        /// <summary>Methods according to which each of those conditions will be verified</summary>
        [Newtonsoft.Json.JsonProperty("methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Methods { get; set; }


    }

    /// <summary>II.2.8) Duration of the Qualification system</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QualificationSystemDuration
    {
        /// <summary>Type of the duration: start - end/indefinite</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualificationSystemDurationType? Type { get; set; }

        /// <summary>Start date of the qualification system</summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BeginDate { get; set; }

        /// <summary>End date of the qualification system</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>Renewal of the qualification system</summary>
        [Newtonsoft.Json.JsonProperty("renewal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Renewal { get; set; }

        /// <summary>Formalities necessary for evaluating if requirements are met</summary>
        [Newtonsoft.Json.JsonProperty("necessaryFormalities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NecessaryFormalities { get; set; }


    }

    /// <summary>Section V: Results of contest</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResultsOfContest
    {
        /// <summary>The contest was terminated without an award or attribution of prizes</summary>
        [Newtonsoft.Json.JsonProperty("contestWasTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContestWasTerminated { get; set; }

        /// <summary>V.1)Information on non-award</summary>
        [Newtonsoft.Json.JsonProperty("noPrizeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultsOfContestNoPrizeType? NoPrizeType { get; set; }

        /// <summary>How was the original notice submitted</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultsOfContestOriginalNoticeSentVia? OriginalNoticeSentVia { get; set; }

        [Newtonsoft.Json.JsonProperty("originalEsender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Esender OriginalEsender { get; set; }

        /// <summary>Which other method was used to submit the original notice.</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentViaOther", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalNoticeSentViaOther { get; set; }

        /// <summary>Date of original notice submission.</summary>
        [Newtonsoft.Json.JsonProperty("originalNoticeSentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginalNoticeSentDate { get; set; }

        /// <summary>V.3.1) Date of the jury decision</summary>
        [Newtonsoft.Json.JsonProperty("dateOfJuryDecision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfJuryDecision { get; set; }

        /// <summary>Number of participants to be contemplated</summary>
        [Newtonsoft.Json.JsonProperty("participantsContemplated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParticipantsContemplated { get; set; }

        /// <summary>Number of participating SMEs</summary>
        [Newtonsoft.Json.JsonProperty("participantsSme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParticipantsSme { get; set; }

        /// <summary>Number of participants from other countries</summary>
        [Newtonsoft.Json.JsonProperty("participantsForeign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParticipantsForeign { get; set; }

        /// <summary>If the infomation in this section is confidential and should not be published on TED, it must be indicated by clicking "NO".</summary>
        [Newtonsoft.Json.JsonProperty("disagreeParticipantCountPublish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeParticipantCountPublish { get; set; }

        /// <summary>V.3.3) Name(s) and address(es) of the winner(s) of the contest</summary>
        [Newtonsoft.Json.JsonProperty("winners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractorContactInformation> Winners { get; set; }

        /// <summary>If the infomation in this section is confidential and should not be published on TED, it must be indicated by clicking "NO".</summary>
        [Newtonsoft.Json.JsonProperty("disagreeWinnersPublish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeWinnersPublish { get; set; }

        [Newtonsoft.Json.JsonProperty("valueOfPrize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueContract ValueOfPrize { get; set; }

        /// <summary>If the infomation in this section is confidential and should not be published on TED, it must be indicated by clicking "NO".</summary>
        [Newtonsoft.Json.JsonProperty("disagreeValuePublish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeValuePublish { get; set; }

        /// <summary>Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultsOfContestValidationState? ValidationState { get; set; }


    }

    /// <summary>IV.3) Rewards and jury</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RewardsAndJury
    {
        /// <summary>A prize/prizes will be awarded</summary>
        [Newtonsoft.Json.JsonProperty("prizeAwarded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrizeAwarded { get; set; }

        /// <summary>Number and value of the prize(s) to be awarded</summary>
        [Newtonsoft.Json.JsonProperty("numberAndValueOfPrizes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NumberAndValueOfPrizes { get; set; }

        /// <summary>IV.3.2) Details of payments to all participants</summary>
        [Newtonsoft.Json.JsonProperty("detailsOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DetailsOfPayments { get; set; }

        /// <summary>IV.3.3) Follow-up contracts
        /// Any service contract following the contest will be awarded to the winner or winners of the contest</summary>
        [Newtonsoft.Json.JsonProperty("serviceContractAwardedToWinner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceContractAwardedToWinner { get; set; }

        /// <summary>IV.3.4) Decision of the jury
        /// The decision of the jury is binding on the contracting authority/entity</summary>
        [Newtonsoft.Json.JsonProperty("decisionOfTheJuryIsBinding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DecisionOfTheJuryIsBinding { get; set; }

        /// <summary>IV.3.5) Names of the selected members of the jury</summary>
        [Newtonsoft.Json.JsonProperty("namesOfSelectedMembersOfJury", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NamesOfSelectedMembersOfJury { get; set; }

        /// <summary>Validation state for Vuejs application.</summary>
        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RewardsAndJuryValidationState? ValidationState { get; set; }


    }

    /// <summary>Directive 2009/81/EC (Defence contracts)
    /// II.1.7) Information about subcontracting</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubcontractingInformation
    {
        /// <summary>The tenderer has to indicate in the tender any share of the contract it may intend to subcontract to third parties and any proposed
        /// subcontractor, as well as the subject-matter of the subcontracts for which they are proposed. (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("tendererHasToIndicateShare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TendererHasToIndicateShare { get; set; }

        /// <summary>The tenderer has to indicate any change occurring at the level of subcontractors during the execution of the contract. (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("tendererHasToIndicateChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TendererHasToIndicateChange { get; set; }

        /// <summary>The contracting authority/entity may oblige the successful tenderer to award all or certain subcontracts through the procedure set out in
        /// Title III of Directive 2009/81/EC.</summary>
        [Newtonsoft.Json.JsonProperty("caMayOblige", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CaMayOblige { get; set; }

        /// <summary>The successful tenderer is obliged to subcontract the following share of the contract through the procedure set out in Title III of Directive
        /// 2009/81/EC: minimum percentage: [ ][ ],[ ] (%), maximum percentage: [ ][ ],[ ] (%) of the value of the contract.</summary>
        [Newtonsoft.Json.JsonProperty("successfulTenderer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuccessfulTenderer { get; set; }

        /// <summary>minimum percentage</summary>
        [Newtonsoft.Json.JsonProperty("successfulTendererMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SuccessfulTendererMin { get; set; }

        /// <summary>maximum percentage</summary>
        [Newtonsoft.Json.JsonProperty("successfulTendererMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SuccessfulTendererMax { get; set; }

        /// <summary>The successful tenderer is obliged to specify which part or parts of the contract it intends to subcontract beyond the required percentage
        /// and to indicate the subcontractors already identified. (if applicable)</summary>
        [Newtonsoft.Json.JsonProperty("successfulTendererToSpecify", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuccessfulTendererToSpecify { get; set; }


    }

    /// <summary>Describes links to TED publication in various languages.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TedLinks
    {
        /// <summary>Link to finnish version.</summary>
        [Newtonsoft.Json.JsonProperty("fi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fi { get; set; }

        /// <summary>Link to swedish version.</summary>
        [Newtonsoft.Json.JsonProperty("sv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sv { get; set; }

        /// <summary>Link to english version.</summary>
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }


    }

    /// <summary>Maps to publication status information sent out by TED.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TedPublicationInfo
    {
        /// <summary>Incrementing issue number. Each procurement groups all
        /// related notices together and this acts as an order number
        /// for those.
        ///             
        /// Internally this is TED's Open Journal System enforced thing.</summary>
        [Newtonsoft.Json.JsonProperty("ojs_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ojs_number { get; set; }

        /// <summary>Uniquely identifies the notice with the current user information.</summary>
        [Newtonsoft.Json.JsonProperty("no_doc_ojs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string No_doc_ojs { get; set; }

        /// <summary>Date of publication to TED.</summary>
        [Newtonsoft.Json.JsonProperty("publication_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Publication_date { get; set; }

        [Newtonsoft.Json.JsonProperty("ted_links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TedLinks Ted_links { get; set; }


    }

    /// <summary>Error or warning generated by TED about a notice.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TedValidationItem
    {
        /// <summary>TED assigned magic string that might identify where the error is or not.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>If the item is accepted or not, despite the validation item.</summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Valid { get; set; }

        /// <summary>How severe the error or warning is.</summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Severity { get; set; }

        /// <summary>Free text description of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>Stack trace type of details of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }


    }

    /// <summary>Describes collection of issues that prevent publication to TED.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TedValidationReport
    {
        /// <summary>Type of error reported. Technical, business rule etc.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>List of problems.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TedValidationItem> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TenderDocumentSectionContract
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TenderDocumentSections
    {
        [Newtonsoft.Json.JsonProperty("documentSections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TenderDocumentSectionContract> DocumentSections { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderDocumentSectionsValidationState? ValidationState { get; set; }


    }

    /// <summary>IV.2) Administrative information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TenderingInformation
    {
        /// <summary>Time limit (date and time) for receipt of tenders or requests to participate</summary>
        [Newtonsoft.Json.JsonProperty("tendersOrRequestsToParticipateDueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TendersOrRequestsToParticipateDueDateTime { get; set; }

        /// <summary>Estimated date of dispatch of invitations to tender or to participate to selected candidates.
        /// Only if not open procedure</summary>
        [Newtonsoft.Json.JsonProperty("estimatedDateOfInvitations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedDateOfInvitations { get; set; }

        /// <summary>Languages in which tenders or requests to participate may be submitted</summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Languages { get; set; }

        /// <summary>Defines how the minimum time tenders need to be valid is given.</summary>
        [Newtonsoft.Json.JsonProperty("tendersMustBeValidOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderingInformationTendersMustBeValidOption? TendersMustBeValidOption { get; set; }

        /// <summary>Date for minimum time frame during which the tenderer must maintain the tender. Only if TendersMustBeValidOption.Date is selected.</summary>
        [Newtonsoft.Json.JsonProperty("tendersMustBeValidUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TendersMustBeValidUntil { get; set; }

        /// <summary>Number of months for minimum time frame during which the tenderer must maintain the tender. Only if TendersMustBeValidOption.Months is selected.</summary>
        [Newtonsoft.Json.JsonProperty("tendersMustBeValidForMonths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TendersMustBeValidForMonths { get; set; }

        /// <summary>Appears only for prior information notices. The estimated date of publishing
        /// followup for the prior information notice.</summary>
        [Newtonsoft.Json.JsonProperty("estimatedDateOfContractNoticePublication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EstimatedDateOfContractNoticePublication { get; set; }

        [Newtonsoft.Json.JsonProperty("tenderOpeningConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderOpeningConditions TenderOpeningConditions { get; set; }

        [Newtonsoft.Json.JsonProperty("defence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefenceAdministrativeInformation Defence { get; set; }

        [Newtonsoft.Json.JsonProperty("estimatedExecutionTimeFrame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrame EstimatedExecutionTimeFrame { get; set; }

        /// <summary>Scheduled date for start of award procedures</summary>
        [Newtonsoft.Json.JsonProperty("scheduledStartDateOfAwardProcedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledStartDateOfAwardProcedures { get; set; }

        [Newtonsoft.Json.JsonProperty("validationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TenderingInformationValidationState? ValidationState { get; set; }


    }

    /// <summary>Conditions for opening of tenders</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TenderOpeningConditions
    {
        /// <summary>Opening date and time in UTC</summary>
        [Newtonsoft.Json.JsonProperty("openingDateAndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDateAndTime { get; set; }

        /// <summary>Place</summary>
        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Place { get; set; }

        /// <summary>Information about authorised persons and opening procedure</summary>
        [Newtonsoft.Json.JsonProperty("informationAboutAuthorisedPersons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InformationAboutAuthorisedPersons { get; set; }


    }

    /// <summary>Describes time frame selection from vuejs application.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TimeFrame
    {
        /// <summary>Type of time frame user wishes to select.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFrameType? Type { get; set; }

        /// <summary>Duration of time frame in days, if used has selected to insert the time frame in days.</summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Days { get; set; }

        /// <summary>Duration of time frame in months, if used has selected to insert the time frame in months.</summary>
        [Newtonsoft.Json.JsonProperty("months", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Months { get; set; }

        /// <summary>Directive 2009/81/EC
        /// Duration of time frame in yaers, if used has selected to insert the time frame in years.</summary>
        [Newtonsoft.Json.JsonProperty("years", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Years { get; set; }

        /// <summary>Start date if user has opted for start and end date.</summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BeginDate { get; set; }

        /// <summary>End date if user has opted for start and end date.</summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>If the notice can be renewed after the duration.</summary>
        [Newtonsoft.Json.JsonProperty("canBeRenewed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanBeRenewed { get; set; }

        /// <summary>Free text description for the renewal option, if it is selected.</summary>
        [Newtonsoft.Json.JsonProperty("renewalDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RenewalDescription { get; set; }

        /// <summary>Directive 2009/81/EC (Defence prior information)
        /// Scheduled date for start of award procedures</summary>
        [Newtonsoft.Json.JsonProperty("scheduledStartDateOfAwardProcedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ScheduledStartDateOfAwardProcedures { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValueContract
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }


    }

    /// <summary>A number or currency value represented as a single value or range</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValueRangeContract
    {
        /// <summary>Type of value (exact or range)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueRangeContractType? Type { get; set; }

        /// <summary>Exact value</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>Min value</summary>
        [Newtonsoft.Json.JsonProperty("minValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinValue { get; set; }

        /// <summary>Max value</summary>
        [Newtonsoft.Json.JsonProperty("maxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxValue { get; set; }

        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>Whether the value can be published or not</summary>
        [Newtonsoft.Json.JsonProperty("disagreeToBePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisagreeToBePublished { get; set; }

        /// <summary>Required for national contracts by law :(</summary>
        [Newtonsoft.Json.JsonProperty("doesNotExceedNationalThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoesNotExceedNationalThreshold { get; set; }


    }

    /// <summary>Common Procurement Vocabulary. EU-sanctioned list of
    /// 6000 9-number codes for different products.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VocCode
    {
        /// <summary>The code itself.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>Clear text explanation for the code.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD1ProcedureType
    {
        Undefined = 0,

        DProcOpen = 1,

        DProcRestricted = 2,

        DProcNegotiatedPriorCallCompetition = 3,

        DProcCompetitiveDialogue = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD1ReasonForNoCompetition
    {
        Undefined = 0,

        DTechnical = 1,

        DArtistic = 2,

        DExistenceExclusive = 3,

        DProtectRights = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD1AdvantageousPurchaseReason
    {
        Undefined = 0,

        DFromWindingSupplier = 1,

        DFromReceivers = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD2ReasonForNoCompetition
    {
        Undefined = 0,

        DTechnical = 1,

        DArtistic = 2,

        DExistenceExclusive = 3,

        DProtectRights = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD2AdvantageousPurchaseReason
    {
        Undefined = 0,

        DFromWindingSupplier = 1,

        DFromReceivers = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD3ProcedureType
    {
        Undefined = 0,

        DProcOpen = 1,

        DProcRestricted = 2,

        DProcNegotiatedPriorCallCompetition = 3,

        DProcCompetitiveDialogue = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD3ReasonForNoCompetition
    {
        Undefined = 0,

        DTechnical = 1,

        DArtistic = 2,

        DExistenceExclusive = 3,

        DProtectRights = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD3AdvantageousPurchaseReason
    {
        Undefined = 0,

        DFromWindingSupplier = 1,

        DFromReceivers = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD3OtherJustification
    {
        ContractServicesListedInDirective = 0,

        ContractServicesOutsideDirective = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexD4ReasonForNoCompetition
    {
        Undefined = 0,

        DTechnical = 1,

        DArtistic = 2,

        DExistenceExclusive = 3,

        DProtectRights = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AnnexNationalPurchaseType
    {
        Undefined = 0,

        JustifiableDirectPurchase = 1,

        OutsideOfScope = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AttachmentInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AttachmentViewModelStatus
    {
        Undefined = 0,

        Staged = 1,

        Published = 2,

        Removed = 4,

        Scanned = 8,

        Error = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AwardContractAwarded
    {
        Undefined = 0,

        AwardedContract = 1,

        NoAwardedContract = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AwardCriteriaCriterionTypes
    {
        Undefined = 0,

        QualityCriterion = 1,

        CostCriterion = 2,

        CostAndQualityCriteria = 3,

        PriceCriterion = 4,

        PriceAndQualityCriteria = 5,

        DescriptiveCriteria = 8,

        LowestPrice = 16,

        EconomicallyAdvantageous = 32,

        AwardCriteriaInDocs = 64,

        AwardCriteriaDescrBelow = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AwardCriteriaDefenceCriterionTypes
    {
        Undefined = 0,

        LowestPrice = 1,

        EconomicallyAdvantageous = 2,

        CriteriaBelow = 4,

        CriteriaElsewhere = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AwardCriteriaDefenceEconomicCriteriaTypes
    {
        Undefined = 0,

        LowestPrice = 1,

        EconomicallyAdvantageous = 2,

        CriteriaBelow = 4,

        CriteriaElsewhere = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CandidateNumberRestrictionsSelected
    {
        Undefined = 0,

        EnvisagedNumber = 1,

        Range = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommunicationInformationProcurementDocumentsAvailable
    {
        Undefined = 0,

        AddressObtainDocs = 1,

        DocsRestricted = 2,

        OrganisationAddress = 4,

        OtherAddress = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommunicationInformationAdditionalInformation
    {
        Undefined = 0,

        AddressToAbove = 1,

        AddressAnother = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommunicationInformationSendTendersOption
    {
        Undefined = 0,

        AddressSendTenders = 1,

        AddressOrganisation = 2,

        AddressFollowing = 4,

        EmailSendTenders = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommunicationInformationSpecsAndAdditionalDocuments
    {
        Undefined = 0,

        AddressToAbove = 1,

        AddressAnother = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CommunicationInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ComplementaryInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConditionsInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConditionsInformationDefenceValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConditionsInformationNationalValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContractAwardDefenceContractValueType
    {
        Undefined = 0,

        Exact = 1,

        Range = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContractAwardDefenceValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContractBodyContactInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContractorContactInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DefenceAdministrativeInformationLanguageType
    {
        Undefined = 0,

        AnyOfficialEu = 1,

        SelectedEu = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FrameworkAgreementInformationFrameworkAgreementType
    {
        Undefined = 0,

        FrameworkSingle = 1,

        FrameworkSeveral = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FrameworkAgreementInformationFrameworkEnvisagedType
    {
        Undefined = 0,

        FrameworkEnvisagedExact = 1,

        FrameworkEnvisagedMax = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum HilmaStatisticsValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LotsInfoLotsSubmittedFor
    {
        Undefined = 0,

        LotsAll = 1,

        LotOneOnly = 2,

        LotsMax = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LotsInfoValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ModificationsReason
    {
        Undefined = 0,

        ModNeedForAdditional = 1,

        ModNeedByCircums = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ModificationsValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NonAwardFailureReason
    {
        Undefined = 0,

        AwardNoTenders = 1,

        AwardDiscontinued = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NonAwardOriginalNoticeSentVia
    {
        Undefined = 0,

        IcarEnotices = 1,

        IcarEsender = 2,

        OtherMeans = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NoticeContractType
    {
        Undefined = 0,

        PriorInformation = 100,

        PriorInformationReduceTimeLimits = 101,

        Contract = 200,

        ContractAward = 300,

        DpsAward = 301,

        PeriodicIndicativeUtilities = 400,

        PeriodicIndicativeUtilitiesReduceTimeLimits = 401,

        ContractUtilities = 500,

        ContractAwardUtilities = 600,

        QualificationSystemUtilities = 700,

        BuyerProfile = 800,

        DefenceSimplifiedContract = 900,

        DefenceConcession = 1000,

        DefenceContractConcessionnaire = 1100,

        DesignContest = 1200,

        DesignContestResults = 1300,

        ExAnte = 1500,

        DefencePriorInformation = 1600,

        DefenceContract = 1700,

        DefenceContractAward = 1800,

        DefenceContractSub = 1900,

        Modification = 2000,

        SocialContract = 2100,

        SocialPriorInformation = 2101,

        SocialContractAward = 2102,

        SocialUtilities = 2200,

        SocialUtilitiesPriorInformation = 2201,

        SocialUtilitiesContractAward = 2202,

        SocialUtilitiesQualificationSystem = 2203,

        SocialConcessionPriorInformation = 2300,

        SocialConcessionAward = 2301,

        Concession = 2400,

        ConcessionAward = 2500,

        NationalPriorInformation = 9901,

        NationalContract = 9902,

        NationalAgricultureContract = 9903,

        NationalTransparency = 9904,

        NationalDirectAward = 9905,

        NationalDesignContest = 9906,

        NationalDefencePriorInformation = 9910,

        NationalDefenceContract = 9911,

        NationalSmallValueProcurement = 9912,

        NationalSmallValueProcurementSocial = 9913,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NoticeContractState
    {
        Undefined = 0,

        Draft = 1,

        Published = 2,

        WaitingToBePublished = 4,

        NotPublic = 8,

        PublishedThenRejected = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NoticeContractTedPublishState
    {
        Undefined = 0,

        SendingToTed = 1,

        SentToTed = 2,

        AwaitingTedPublish = 3,

        PublishedInTed = 4,

        RejectedByTed = 5,

        WaitingForInformation = 6,

        NotPublished = 7,

        ApprovedForPublish = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ObjectDescriptionValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OptionsAndVariantsOptionType
    {
        Undefined = 0,

        Days = 1,

        Months = 2,

        BeginAndEndDate = 3,

        Years = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractContractingAuthorityType
    {
        Undefined = 0,

        MaintypeMinistry = 1,

        MaintypeNatagency = 2,

        MaintypeLocalauth = 4,

        MaintypeLocalagency = 8,

        MaintypePublicbody = 16,

        MaintypeEu = 32,

        OtherType = 64,

        MaintypeChurch = 128,

        MaintypeFarmer = 256,

        MaintypeUtility = 512,

        MaintypeSocialUtility = 1024,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractContractingType
    {
        Undefined = 0,

        ContractingAuthority = 1,

        ContractingEntity = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractMainActivity
    {
        Undefined = 0,

        MainactivGeneral = 1,

        MainactivDefence = 2,

        MainactivSafety = 4,

        MainactivEnvironment = 8,

        MainactivEconomic = 16,

        MainactivHealth = 32,

        MainactivHousing = 64,

        MainactivSocial = 128,

        MainactivCulture = 256,

        MainactivEducation = 512,

        OtherActivity = 1024,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractMainActivityUtilities
    {
        Undefined = 0,

        MainactivGasProduct = 1,

        MainactivElectricity = 2,

        MainactivGasExplor = 4,

        MainactivCoal = 8,

        MainactivWater = 16,

        MainactivPostal = 32,

        MainactivRailway = 64,

        MainactivBus = 128,

        MainactivPort = 256,

        MainactivAirportrelated = 512,

        OtherActivity = 1024,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrganisationContractDataSource
    {
        Undefined = 0,

        User = 1,

        Admin = 2,

        Validated = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcedureInformationProcedureType
    {
        Undefined = 0,

        ProctypeOpen = 1,

        ProctypeRestricted = 2,

        ProctypeCompNegotiation = 3,

        ProctypeCompDialogue = 4,

        ProctypeInnovation = 5,

        ProctypeConcessionWoPub = 6,

        ProctypeNegotWCall = 7,

        ProctypeAwardWoCall = 8,

        ProctypeNegotiatedWoNotice = 9,

        ProctypeNegotiatedWoPub = 10,

        ProctypeNegotiationsInvolved = 11,

        ProctypeWithConcessNotice = 12,

        ProctypeNegotiation = 13,

        ProctypeOther = 14,

        AwardWoPriorPubD1 = 15,

        AwardWoPriorPubD4 = 16,

        ProctypeNationalDirect = 17,

        AwardWoPriorPubD1Other = 18,

        AwardWoPriorPubD4Other = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcedureInformationContestType
    {
        Undefined = 0,

        Open = 1,

        TypeRestricted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcedureInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcedureInformationNationalTransparencyType
    {
        Undefined = 0,

        TransparencyLaw15 = 1,

        TransparencyLaw16 = 2,

        TransparencyOther = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProceduresForReviewInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementObjectValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractContractType
    {
        Undefined = 0,

        Supplies = 1,

        Services = 2,

        Works = 4,

        SocialServices = 8,

        EducationalServices = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractProcurementCategory
    {
        Undefined = 0,

        Public = 1,

        Defence = 2,

        Utility = 4,

        Lisence = 8,

        Agriculture = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractState
    {
        Undefined = 0,

        Draft = 1,

        Published = 2,

        WaitingToBePublished = 4,

        NotPublic = 8,

        PublishedThenRejected = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractDefenceWorks
    {
        Undefined = 0,

        Execution = 1,

        Design = 2,

        Realisation = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractDefenceSupplies
    {
        Undefined = 0,

        Purchase = 1,

        Lease = 2,

        Rental = 4,

        HirePurchase = 8,

        Combination = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractPublish
    {
        Undefined = 0,

        ToTed = 1,

        ToHilma = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractAgricultureWorks
    {
        Undefined = 0,

        NewConstruction = 1,

        Expansion = 2,

        BasicRepair = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProcurementProjectContractTendering
    {
        Undefined = 0,

        TenderingInHilma = 1,

        TenderingElsewhere = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QualificationSystemDurationType
    {
        Undefined = 0,

        BeginAndEndDate = 1,

        Indefinite = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResultsOfContestNoPrizeType
    {
        Undefined = 0,

        AwardNoProjects = 1,

        AwardDiscontinued = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResultsOfContestOriginalNoticeSentVia
    {
        Undefined = 0,

        IcarEnotices = 1,

        IcarEsender = 2,

        OtherMeans = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResultsOfContestValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RewardsAndJuryValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TenderDocumentSectionsValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TenderingInformationTendersMustBeValidOption
    {
        TimeNotSet = 0,

        Date = 1,

        Months = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TenderingInformationValidationState
    {
        Pristine = 0,

        Invalid = 1,

        Valid = 2,

        Forbidden = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TimeFrameType
    {
        Undefined = 0,

        Days = 1,

        Months = 2,

        BeginAndEndDate = 3,

        Years = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ValueRangeContractType
    {
        Undefined = 0,

        Exact = 1,

        Range = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108